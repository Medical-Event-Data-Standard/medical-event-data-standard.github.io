"use strict";(self.webpackChunktemp=self.webpackChunktemp||[]).push([[987],{94466:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>A,contentTitle:()=>s,default:()=>b,frontMatter:()=>i,metadata:()=>o,toc:()=>p});const o=JSON.parse('{"id":"tutorials/kdd2025/MEDS_intro","title":"Getting Familiar with MEDS","description":"Before we start building datasets and models using the MEDS ecosystem, we need to understand what the MEDS","source":"@site/docs/tutorials/kdd2025/MEDS_intro.mdx","sourceDirName":"tutorials/kdd2025","slug":"/tutorials/kdd2025/MEDS_intro","permalink":"/docs/tutorials/kdd2025/MEDS_intro","draft":false,"unlisted":false,"editUrl":"https://github.com/Medical-Event-Data-Standard/medical-event-data-standard.github.io/tree/main/docs/docs/tutorials/kdd2025/MEDS_intro.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"mainSidebar","previous":{"title":"MEDS KDD 2025 Tutorial","permalink":"/docs/tutorials/kdd2025/"},"next":{"title":"Converting to MEDS","permalink":"/docs/tutorials/kdd2025/converting_to_MEDS"}}');var a=e(74848),r=e(28453),l=e(32971),d=e.n(l);const c=JSON.parse('{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# What is MEDS?\\n","\\n","<p align=\\"center\\">\\n","  <picture>\\n","    <source media=\\"(prefers-color-scheme: dark)\\" srcset=\\"https://raw.githubusercontent.com/Medical-Event-Data-Standard/meds/refs/heads/main/static/logo_dark.svg\\">\\n","    <source media=\\"(prefers-color-scheme: light)\\" srcset=\\"https://raw.githubusercontent.com/Medical-Event-Data-Standard/meds/refs/heads/main/static/logo_light.svg\\">\\n","    <img width=\\"200\\" height=\\"200\\" alt=\\"MEDS Logo\\" src=\\"https://raw.githubusercontent.com/Medical-Event-Data-Standard/meds/refs/heads/main/static/logo_light.svg\\">\\n","  </picture>\\n","</p>\\n","\\n","MEDS (The Medical Event Data Standard) is both a data standard for electronic health record (EHR) data and an open source ecosystem built atop that data standard that enables transportable, efficient tools to be used across different AI applications. This tutorial quickly explores that standard and ecosystem, so you can learn more. Let\'s dive in!\\n","\\n","## MEDS Data Standard\\n","The MEDS Data standard embodies simplicity first and foremost -- rather than trying to capture in a unified vocabulary all aspects of EHR data, MEDS tries to capture _only_ the shared underlying structure that defines EHR data. Namely, the fact that EHR data consists of a sequence of complex events occurring for a patient in continuous time. Let\'s see how this translates into our schema, visually:\\n","\\n","<p align=\\"center\\">\\n","<img alt=\\"MEDS Data Standard\\" src=\\"https://raw.githubusercontent.com/Medical-Event-Data-Standard/medical-event-data-standard.github.io/refs/heads/main/static/img/data_figure.svg\\">\\n","</p>\\n","\\n","Seeing this visually is one thing, but let\'s check out some actual data! To do this, we\'ll use a simple, static dataset defined in the [MEDS Testing Helpers](https://github.com/Medical-Event-Data-Standard/meds_testing_helpers/blob/main/src/meds_testing_helpers/static_sample_data/simple_static_sharded_by_split.yaml) repository, which we\'ll write to the directory `MEDS_data` in this notebook:"],"metadata":{"id":"OEEbI36I7WWG"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"tiU5oDUEneUi","colab":{"base_uri":"https://localhost:8080/"},"outputId":"29267a34-39da-4524-dc79-79502d092b9e"},"outputs":[{"output_type":"stream","name":"stdout","text":["\\u001b[?25l   \\u001b[90m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\u001b[0m \\u001b[32m0.0/154.5 kB\\u001b[0m \\u001b[31m?\\u001b[0m eta \\u001b[36m-:--:--\\u001b[0m\\r\\u001b[2K   \\u001b[91m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\u001b[0m\\u001b[91m\u2578\\u001b[0m \\u001b[32m153.6/154.5 kB\\u001b[0m \\u001b[31m4.8 MB/s\\u001b[0m eta \\u001b[36m0:00:01\\u001b[0m\\r\\u001b[2K   \\u001b[90m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\u001b[0m \\u001b[32m154.5/154.5 kB\\u001b[0m \\u001b[31m2.8 MB/s\\u001b[0m eta \\u001b[36m0:00:00\\u001b[0m\\n","\\u001b[?25h"]}],"source":["!pip install --quiet meds_testing_helpers~=0.3.0"]},{"cell_type":"code","source":["from meds_testing_helpers.static_sample_data import SIMPLE_STATIC_SHARDED_BY_SPLIT\\n","from meds_testing_helpers.dataset import MEDSDataset\\n","from pathlib import Path\\n","\\n","data_root = Path(\\"MEDS_data\\")\\n","\\n","data = MEDSDataset.from_yaml(SIMPLE_STATIC_SHARDED_BY_SPLIT)\\n","data.write(data_root);"],"metadata":{"id":"t_VqrGYvEo0q"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["What\'s in this directory? We\'ll use the linux `tree` command to print it:"],"metadata":{"id":"JBh1-80gE_Rj"}},{"cell_type":"code","source":["%%bash\\n","apt-get -qq install tree > /dev/null\\n","tree MEDS_data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JZwjpoVYE3vU","outputId":"d66554b9-9dfc-4c52-f864-5bc2aae1641f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["MEDS_data\\n","\u251c\u2500\u2500 data\\n","\u2502\xa0\xa0 \u251c\u2500\u2500 held_out\\n","\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 0.parquet\\n","\u2502\xa0\xa0 \u251c\u2500\u2500 train\\n","\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 0.parquet\\n","\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 1.parquet\\n","\u2502\xa0\xa0 \u2514\u2500\u2500 tuning\\n","\u2502\xa0\xa0     \u2514\u2500\u2500 0.parquet\\n","\u2514\u2500\u2500 metadata\\n","    \u251c\u2500\u2500 codes.parquet\\n","    \u251c\u2500\u2500 dataset.json\\n","    \u2514\u2500\u2500 subject_splits.parquet\\n","\\n","5 directories, 7 files\\n"]}]},{"cell_type":"markdown","source":["As we can see, there are a variety of files here. Let\'s break them down by type: data and metadata.\\n","\\n","### MEDS Data Files (`data/**.parquet`)\\n","MEDS data files are stored as a sharded set of [Parquet](https://parquet.apache.org/) files. In MEDS, we use the term \\"shard name\\" to refer to the full relative string to the file name under the `data/` sub-directory. So, in this case, we have 4 shards, with the following names:\\n","  - `held_out/0`\\n","  - `train/0`\\n","  - `train/1`\\n","  - `tuning/0`\\n","\\n","Importantly, note that there are no requirements on shard names -- clearly, this dataset is \\"sharded by split\\" so that all patients in any given shard are within the same modeling split (either a train, tuning, or held out split), but this is _not_ required in general.\\n","\\n","Each of these data files follows the schema above:"],"metadata":{"id":"AvCAT-QiKvbA"}},{"cell_type":"code","source":["import pandas as pd\\n","\\n","print(\\"Train 0:\\")\\n","display(pd.read_parquet(data_root / \\"data\\" / \\"train/0.parquet\\").head(5))\\n","print(\\"\\\\nTuning 0:\\")\\n","display(pd.read_parquet(data_root / \\"data\\" / \\"tuning/0.parquet\\").head(5))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":447},"id":"KvfTbP5NFCoY","outputId":"7dbe4325-e7d9-49b0-bf54-6a006a08f71f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Train 0:\\n"]},{"output_type":"display_data","data":{"text/plain":["   subject_id                time                code  numeric_value\\n","0      239684                 NaT    EYE_COLOR//BROWN            NaN\\n","1      239684                 NaT              HEIGHT     175.271118\\n","2      239684 1980-12-28 00:00:00                 DOB            NaN\\n","3      239684 2010-05-11 17:41:51  ADMISSION//CARDIAC            NaN\\n","4      239684 2010-05-11 17:41:51                  HR     102.599998"],"text/html":["\\n","  <div id=\\"df-08b3b641-c28e-4876-a6b5-e0cd264aeffc\\" class=\\"colab-df-container\\">\\n","    <div>\\n","<style scoped>\\n","    .dataframe tbody tr th:only-of-type {\\n","        vertical-align: middle;\\n","    }\\n","\\n","    .dataframe tbody tr th {\\n","        vertical-align: top;\\n","    }\\n","\\n","    .dataframe thead th {\\n","        text-align: right;\\n","    }\\n","</style>\\n","<table border=\\"1\\" class=\\"dataframe\\">\\n","  <thead>\\n","    <tr style=\\"text-align: right;\\">\\n","      <th></th>\\n","      <th>subject_id</th>\\n","      <th>time</th>\\n","      <th>code</th>\\n","      <th>numeric_value</th>\\n","    </tr>\\n","  </thead>\\n","  <tbody>\\n","    <tr>\\n","      <th>0</th>\\n","      <td>239684</td>\\n","      <td>NaT</td>\\n","      <td>EYE_COLOR//BROWN</td>\\n","      <td>NaN</td>\\n","    </tr>\\n","    <tr>\\n","      <th>1</th>\\n","      <td>239684</td>\\n","      <td>NaT</td>\\n","      <td>HEIGHT</td>\\n","      <td>175.271118</td>\\n","    </tr>\\n","    <tr>\\n","      <th>2</th>\\n","      <td>239684</td>\\n","      <td>1980-12-28 00:00:00</td>\\n","      <td>DOB</td>\\n","      <td>NaN</td>\\n","    </tr>\\n","    <tr>\\n","      <th>3</th>\\n","      <td>239684</td>\\n","      <td>2010-05-11 17:41:51</td>\\n","      <td>ADMISSION//CARDIAC</td>\\n","      <td>NaN</td>\\n","    </tr>\\n","    <tr>\\n","      <th>4</th>\\n","      <td>239684</td>\\n","      <td>2010-05-11 17:41:51</td>\\n","      <td>HR</td>\\n","      <td>102.599998</td>\\n","    </tr>\\n","  </tbody>\\n","</table>\\n","</div>\\n","    <div class=\\"colab-df-buttons\\">\\n","\\n","  <div class=\\"colab-df-container\\">\\n","    <button class=\\"colab-df-convert\\" onclick=\\"convertToInteractive(\'df-08b3b641-c28e-4876-a6b5-e0cd264aeffc\')\\"\\n","            title=\\"Convert this dataframe to an interactive table.\\"\\n","            style=\\"display:none;\\">\\n","\\n","  <svg xmlns=\\"http://www.w3.org/2000/svg\\" height=\\"24px\\" viewBox=\\"0 -960 960 960\\">\\n","    <path d=\\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\\"/>\\n","  </svg>\\n","    </button>\\n","\\n","  <style>\\n","    .colab-df-container {\\n","      display:flex;\\n","      gap: 12px;\\n","    }\\n","\\n","    .colab-df-convert {\\n","      background-color: #E8F0FE;\\n","      border: none;\\n","      border-radius: 50%;\\n","      cursor: pointer;\\n","      display: none;\\n","      fill: #1967D2;\\n","      height: 32px;\\n","      padding: 0 0 0 0;\\n","      width: 32px;\\n","    }\\n","\\n","    .colab-df-convert:hover {\\n","      background-color: #E2EBFA;\\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\\n","      fill: #174EA6;\\n","    }\\n","\\n","    .colab-df-buttons div {\\n","      margin-bottom: 4px;\\n","    }\\n","\\n","    [theme=dark] .colab-df-convert {\\n","      background-color: #3B4455;\\n","      fill: #D2E3FC;\\n","    }\\n","\\n","    [theme=dark] .colab-df-convert:hover {\\n","      background-color: #434B5C;\\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\\n","      fill: #FFFFFF;\\n","    }\\n","  </style>\\n","\\n","    <script>\\n","      const buttonEl =\\n","        document.querySelector(\'#df-08b3b641-c28e-4876-a6b5-e0cd264aeffc button.colab-df-convert\');\\n","      buttonEl.style.display =\\n","        google.colab.kernel.accessAllowed ? \'block\' : \'none\';\\n","\\n","      async function convertToInteractive(key) {\\n","        const element = document.querySelector(\'#df-08b3b641-c28e-4876-a6b5-e0cd264aeffc\');\\n","        const dataTable =\\n","          await google.colab.kernel.invokeFunction(\'convertToInteractive\',\\n","                                                    [key], {});\\n","        if (!dataTable) return;\\n","\\n","        const docLinkHtml = \'Like what you see? Visit the \' +\\n","          \'<a target=\\"_blank\\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>\'\\n","          + \' to learn more about interactive tables.\';\\n","        element.innerHTML = \'\';\\n","        dataTable[\'output_type\'] = \'display_data\';\\n","        await google.colab.output.renderOutput(dataTable, element);\\n","        const docLink = document.createElement(\'div\');\\n","        docLink.innerHTML = docLinkHtml;\\n","        element.appendChild(docLink);\\n","      }\\n","    <\/script>\\n","  </div>\\n","\\n","\\n","    <div id=\\"df-a9f2fd34-6a6c-42ea-85fd-4486afce2ad1\\">\\n","      <button class=\\"colab-df-quickchart\\" onclick=\\"quickchart(\'df-a9f2fd34-6a6c-42ea-85fd-4486afce2ad1\')\\"\\n","                title=\\"Suggest charts\\"\\n","                style=\\"display:none;\\">\\n","\\n","<svg xmlns=\\"http://www.w3.org/2000/svg\\" height=\\"24px\\"viewBox=\\"0 0 24 24\\"\\n","     width=\\"24px\\">\\n","    <g>\\n","        <path d=\\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\\"/>\\n","    </g>\\n","</svg>\\n","      </button>\\n","\\n","<style>\\n","  .colab-df-quickchart {\\n","      --bg-color: #E8F0FE;\\n","      --fill-color: #1967D2;\\n","      --hover-bg-color: #E2EBFA;\\n","      --hover-fill-color: #174EA6;\\n","      --disabled-fill-color: #AAA;\\n","      --disabled-bg-color: #DDD;\\n","  }\\n","\\n","  [theme=dark] .colab-df-quickchart {\\n","      --bg-color: #3B4455;\\n","      --fill-color: #D2E3FC;\\n","      --hover-bg-color: #434B5C;\\n","      --hover-fill-color: #FFFFFF;\\n","      --disabled-bg-color: #3B4455;\\n","      --disabled-fill-color: #666;\\n","  }\\n","\\n","  .colab-df-quickchart {\\n","    background-color: var(--bg-color);\\n","    border: none;\\n","    border-radius: 50%;\\n","    cursor: pointer;\\n","    display: none;\\n","    fill: var(--fill-color);\\n","    height: 32px;\\n","    padding: 0;\\n","    width: 32px;\\n","  }\\n","\\n","  .colab-df-quickchart:hover {\\n","    background-color: var(--hover-bg-color);\\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\\n","    fill: var(--button-hover-fill-color);\\n","  }\\n","\\n","  .colab-df-quickchart-complete:disabled,\\n","  .colab-df-quickchart-complete:disabled:hover {\\n","    background-color: var(--disabled-bg-color);\\n","    fill: var(--disabled-fill-color);\\n","    box-shadow: none;\\n","  }\\n","\\n","  .colab-df-spinner {\\n","    border: 2px solid var(--fill-color);\\n","    border-color: transparent;\\n","    border-bottom-color: var(--fill-color);\\n","    animation:\\n","      spin 1s steps(1) infinite;\\n","  }\\n","\\n","  @keyframes spin {\\n","    0% {\\n","      border-color: transparent;\\n","      border-bottom-color: var(--fill-color);\\n","      border-left-color: var(--fill-color);\\n","    }\\n","    20% {\\n","      border-color: transparent;\\n","      border-left-color: var(--fill-color);\\n","      border-top-color: var(--fill-color);\\n","    }\\n","    30% {\\n","      border-color: transparent;\\n","      border-left-color: var(--fill-color);\\n","      border-top-color: var(--fill-color);\\n","      border-right-color: var(--fill-color);\\n","    }\\n","    40% {\\n","      border-color: transparent;\\n","      border-right-color: var(--fill-color);\\n","      border-top-color: var(--fill-color);\\n","    }\\n","    60% {\\n","      border-color: transparent;\\n","      border-right-color: var(--fill-color);\\n","    }\\n","    80% {\\n","      border-color: transparent;\\n","      border-right-color: var(--fill-color);\\n","      border-bottom-color: var(--fill-color);\\n","    }\\n","    90% {\\n","      border-color: transparent;\\n","      border-bottom-color: var(--fill-color);\\n","    }\\n","  }\\n","</style>\\n","\\n","      <script>\\n","        async function quickchart(key) {\\n","          const quickchartButtonEl =\\n","            document.querySelector(\'#\' + key + \' button\');\\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\\n","          quickchartButtonEl.classList.add(\'colab-df-spinner\');\\n","          try {\\n","            const charts = await google.colab.kernel.invokeFunction(\\n","                \'suggestCharts\', [key], {});\\n","          } catch (error) {\\n","            console.error(\'Error during call to suggestCharts:\', error);\\n","          }\\n","          quickchartButtonEl.classList.remove(\'colab-df-spinner\');\\n","          quickchartButtonEl.classList.add(\'colab-df-quickchart-complete\');\\n","        }\\n","        (() => {\\n","          let quickchartButtonEl =\\n","            document.querySelector(\'#df-a9f2fd34-6a6c-42ea-85fd-4486afce2ad1 button\');\\n","          quickchartButtonEl.style.display =\\n","            google.colab.kernel.accessAllowed ? \'block\' : \'none\';\\n","        })();\\n","      <\/script>\\n","    </div>\\n","\\n","    </div>\\n","  </div>\\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\\n  \\"name\\": \\"display(pd\\",\\n  \\"rows\\": 5,\\n  \\"fields\\": [\\n    {\\n      \\"column\\": \\"subject_id\\",\\n      \\"properties\\": {\\n        \\"dtype\\": \\"number\\",\\n        \\"std\\": 0,\\n        \\"min\\": 239684,\\n        \\"max\\": 239684,\\n        \\"num_unique_values\\": 1,\\n        \\"samples\\": [\\n          239684\\n        ],\\n        \\"semantic_type\\": \\"\\",\\n        \\"description\\": \\"\\"\\n      }\\n    },\\n    {\\n      \\"column\\": \\"time\\",\\n      \\"properties\\": {\\n        \\"dtype\\": \\"date\\",\\n        \\"min\\": \\"1980-12-28 00:00:00\\",\\n        \\"max\\": \\"2010-05-11 17:41:51\\",\\n        \\"num_unique_values\\": 2,\\n        \\"samples\\": [\\n          \\"2010-05-11 17:41:51\\"\\n        ],\\n        \\"semantic_type\\": \\"\\",\\n        \\"description\\": \\"\\"\\n      }\\n    },\\n    {\\n      \\"column\\": \\"code\\",\\n      \\"properties\\": {\\n        \\"dtype\\": \\"string\\",\\n        \\"num_unique_values\\": 5,\\n        \\"samples\\": [\\n          \\"HEIGHT\\"\\n        ],\\n        \\"semantic_type\\": \\"\\",\\n        \\"description\\": \\"\\"\\n      }\\n    },\\n    {\\n      \\"column\\": \\"numeric_value\\",\\n      \\"properties\\": {\\n        \\"dtype\\": \\"float32\\",\\n        \\"num_unique_values\\": 2,\\n        \\"samples\\": [\\n          102.5999984741211\\n        ],\\n        \\"semantic_type\\": \\"\\",\\n        \\"description\\": \\"\\"\\n      }\\n    }\\n  ]\\n}"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\\n","Tuning 0:\\n"]},{"output_type":"display_data","data":{"text/plain":["   subject_id                time                  code  numeric_value\\n","0      754281                 NaT      EYE_COLOR//BROWN            NaN\\n","1      754281                 NaT                HEIGHT      166.22261\\n","2      754281 1988-12-19 00:00:00                   DOB            NaN\\n","3      754281 2010-01-03 06:27:59  ADMISSION//PULMONARY            NaN\\n","4      754281 2010-01-03 06:27:59                    HR      142.00000"],"text/html":["\\n","  <div id=\\"df-7ada9c8c-85f8-4232-82b7-75207ba05d8e\\" class=\\"colab-df-container\\">\\n","    <div>\\n","<style scoped>\\n","    .dataframe tbody tr th:only-of-type {\\n","        vertical-align: middle;\\n","    }\\n","\\n","    .dataframe tbody tr th {\\n","        vertical-align: top;\\n","    }\\n","\\n","    .dataframe thead th {\\n","        text-align: right;\\n","    }\\n","</style>\\n","<table border=\\"1\\" class=\\"dataframe\\">\\n","  <thead>\\n","    <tr style=\\"text-align: right;\\">\\n","      <th></th>\\n","      <th>subject_id</th>\\n","      <th>time</th>\\n","      <th>code</th>\\n","      <th>numeric_value</th>\\n","    </tr>\\n","  </thead>\\n","  <tbody>\\n","    <tr>\\n","      <th>0</th>\\n","      <td>754281</td>\\n","      <td>NaT</td>\\n","      <td>EYE_COLOR//BROWN</td>\\n","      <td>NaN</td>\\n","    </tr>\\n","    <tr>\\n","      <th>1</th>\\n","      <td>754281</td>\\n","      <td>NaT</td>\\n","      <td>HEIGHT</td>\\n","      <td>166.22261</td>\\n","    </tr>\\n","    <tr>\\n","      <th>2</th>\\n","      <td>754281</td>\\n","      <td>1988-12-19 00:00:00</td>\\n","      <td>DOB</td>\\n","      <td>NaN</td>\\n","    </tr>\\n","    <tr>\\n","      <th>3</th>\\n","      <td>754281</td>\\n","      <td>2010-01-03 06:27:59</td>\\n","      <td>ADMISSION//PULMONARY</td>\\n","      <td>NaN</td>\\n","    </tr>\\n","    <tr>\\n","      <th>4</th>\\n","      <td>754281</td>\\n","      <td>2010-01-03 06:27:59</td>\\n","      <td>HR</td>\\n","      <td>142.00000</td>\\n","    </tr>\\n","  </tbody>\\n","</table>\\n","</div>\\n","    <div class=\\"colab-df-buttons\\">\\n","\\n","  <div class=\\"colab-df-container\\">\\n","    <button class=\\"colab-df-convert\\" onclick=\\"convertToInteractive(\'df-7ada9c8c-85f8-4232-82b7-75207ba05d8e\')\\"\\n","            title=\\"Convert this dataframe to an interactive table.\\"\\n","            style=\\"display:none;\\">\\n","\\n","  <svg xmlns=\\"http://www.w3.org/2000/svg\\" height=\\"24px\\" viewBox=\\"0 -960 960 960\\">\\n","    <path d=\\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\\"/>\\n","  </svg>\\n","    </button>\\n","\\n","  <style>\\n","    .colab-df-container {\\n","      display:flex;\\n","      gap: 12px;\\n","    }\\n","\\n","    .colab-df-convert {\\n","      background-color: #E8F0FE;\\n","      border: none;\\n","      border-radius: 50%;\\n","      cursor: pointer;\\n","      display: none;\\n","      fill: #1967D2;\\n","      height: 32px;\\n","      padding: 0 0 0 0;\\n","      width: 32px;\\n","    }\\n","\\n","    .colab-df-convert:hover {\\n","      background-color: #E2EBFA;\\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\\n","      fill: #174EA6;\\n","    }\\n","\\n","    .colab-df-buttons div {\\n","      margin-bottom: 4px;\\n","    }\\n","\\n","    [theme=dark] .colab-df-convert {\\n","      background-color: #3B4455;\\n","      fill: #D2E3FC;\\n","    }\\n","\\n","    [theme=dark] .colab-df-convert:hover {\\n","      background-color: #434B5C;\\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\\n","      fill: #FFFFFF;\\n","    }\\n","  </style>\\n","\\n","    <script>\\n","      const buttonEl =\\n","        document.querySelector(\'#df-7ada9c8c-85f8-4232-82b7-75207ba05d8e button.colab-df-convert\');\\n","      buttonEl.style.display =\\n","        google.colab.kernel.accessAllowed ? \'block\' : \'none\';\\n","\\n","      async function convertToInteractive(key) {\\n","        const element = document.querySelector(\'#df-7ada9c8c-85f8-4232-82b7-75207ba05d8e\');\\n","        const dataTable =\\n","          await google.colab.kernel.invokeFunction(\'convertToInteractive\',\\n","                                                    [key], {});\\n","        if (!dataTable) return;\\n","\\n","        const docLinkHtml = \'Like what you see? Visit the \' +\\n","          \'<a target=\\"_blank\\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>\'\\n","          + \' to learn more about interactive tables.\';\\n","        element.innerHTML = \'\';\\n","        dataTable[\'output_type\'] = \'display_data\';\\n","        await google.colab.output.renderOutput(dataTable, element);\\n","        const docLink = document.createElement(\'div\');\\n","        docLink.innerHTML = docLinkHtml;\\n","        element.appendChild(docLink);\\n","      }\\n","    <\/script>\\n","  </div>\\n","\\n","\\n","    <div id=\\"df-bdd7093f-076b-44da-aa4c-4f018a0f70ea\\">\\n","      <button class=\\"colab-df-quickchart\\" onclick=\\"quickchart(\'df-bdd7093f-076b-44da-aa4c-4f018a0f70ea\')\\"\\n","                title=\\"Suggest charts\\"\\n","                style=\\"display:none;\\">\\n","\\n","<svg xmlns=\\"http://www.w3.org/2000/svg\\" height=\\"24px\\"viewBox=\\"0 0 24 24\\"\\n","     width=\\"24px\\">\\n","    <g>\\n","        <path d=\\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\\"/>\\n","    </g>\\n","</svg>\\n","      </button>\\n","\\n","<style>\\n","  .colab-df-quickchart {\\n","      --bg-color: #E8F0FE;\\n","      --fill-color: #1967D2;\\n","      --hover-bg-color: #E2EBFA;\\n","      --hover-fill-color: #174EA6;\\n","      --disabled-fill-color: #AAA;\\n","      --disabled-bg-color: #DDD;\\n","  }\\n","\\n","  [theme=dark] .colab-df-quickchart {\\n","      --bg-color: #3B4455;\\n","      --fill-color: #D2E3FC;\\n","      --hover-bg-color: #434B5C;\\n","      --hover-fill-color: #FFFFFF;\\n","      --disabled-bg-color: #3B4455;\\n","      --disabled-fill-color: #666;\\n","  }\\n","\\n","  .colab-df-quickchart {\\n","    background-color: var(--bg-color);\\n","    border: none;\\n","    border-radius: 50%;\\n","    cursor: pointer;\\n","    display: none;\\n","    fill: var(--fill-color);\\n","    height: 32px;\\n","    padding: 0;\\n","    width: 32px;\\n","  }\\n","\\n","  .colab-df-quickchart:hover {\\n","    background-color: var(--hover-bg-color);\\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\\n","    fill: var(--button-hover-fill-color);\\n","  }\\n","\\n","  .colab-df-quickchart-complete:disabled,\\n","  .colab-df-quickchart-complete:disabled:hover {\\n","    background-color: var(--disabled-bg-color);\\n","    fill: var(--disabled-fill-color);\\n","    box-shadow: none;\\n","  }\\n","\\n","  .colab-df-spinner {\\n","    border: 2px solid var(--fill-color);\\n","    border-color: transparent;\\n","    border-bottom-color: var(--fill-color);\\n","    animation:\\n","      spin 1s steps(1) infinite;\\n","  }\\n","\\n","  @keyframes spin {\\n","    0% {\\n","      border-color: transparent;\\n","      border-bottom-color: var(--fill-color);\\n","      border-left-color: var(--fill-color);\\n","    }\\n","    20% {\\n","      border-color: transparent;\\n","      border-left-color: var(--fill-color);\\n","      border-top-color: var(--fill-color);\\n","    }\\n","    30% {\\n","      border-color: transparent;\\n","      border-left-color: var(--fill-color);\\n","      border-top-color: var(--fill-color);\\n","      border-right-color: var(--fill-color);\\n","    }\\n","    40% {\\n","      border-color: transparent;\\n","      border-right-color: var(--fill-color);\\n","      border-top-color: var(--fill-color);\\n","    }\\n","    60% {\\n","      border-color: transparent;\\n","      border-right-color: var(--fill-color);\\n","    }\\n","    80% {\\n","      border-color: transparent;\\n","      border-right-color: var(--fill-color);\\n","      border-bottom-color: var(--fill-color);\\n","    }\\n","    90% {\\n","      border-color: transparent;\\n","      border-bottom-color: var(--fill-color);\\n","    }\\n","  }\\n","</style>\\n","\\n","      <script>\\n","        async function quickchart(key) {\\n","          const quickchartButtonEl =\\n","            document.querySelector(\'#\' + key + \' button\');\\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\\n","          quickchartButtonEl.classList.add(\'colab-df-spinner\');\\n","          try {\\n","            const charts = await google.colab.kernel.invokeFunction(\\n","                \'suggestCharts\', [key], {});\\n","          } catch (error) {\\n","            console.error(\'Error during call to suggestCharts:\', error);\\n","          }\\n","          quickchartButtonEl.classList.remove(\'colab-df-spinner\');\\n","          quickchartButtonEl.classList.add(\'colab-df-quickchart-complete\');\\n","        }\\n","        (() => {\\n","          let quickchartButtonEl =\\n","            document.querySelector(\'#df-bdd7093f-076b-44da-aa4c-4f018a0f70ea button\');\\n","          quickchartButtonEl.style.display =\\n","            google.colab.kernel.accessAllowed ? \'block\' : \'none\';\\n","        })();\\n","      <\/script>\\n","    </div>\\n","\\n","    </div>\\n","  </div>\\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\\n  \\"name\\": \\"display(pd\\",\\n  \\"rows\\": 5,\\n  \\"fields\\": [\\n    {\\n      \\"column\\": \\"subject_id\\",\\n      \\"properties\\": {\\n        \\"dtype\\": \\"number\\",\\n        \\"std\\": 0,\\n        \\"min\\": 754281,\\n        \\"max\\": 754281,\\n        \\"num_unique_values\\": 1,\\n        \\"samples\\": [\\n          754281\\n        ],\\n        \\"semantic_type\\": \\"\\",\\n        \\"description\\": \\"\\"\\n      }\\n    },\\n    {\\n      \\"column\\": \\"time\\",\\n      \\"properties\\": {\\n        \\"dtype\\": \\"date\\",\\n        \\"min\\": \\"1988-12-19 00:00:00\\",\\n        \\"max\\": \\"2010-01-03 06:27:59\\",\\n        \\"num_unique_values\\": 2,\\n        \\"samples\\": [\\n          \\"2010-01-03 06:27:59\\"\\n        ],\\n        \\"semantic_type\\": \\"\\",\\n        \\"description\\": \\"\\"\\n      }\\n    },\\n    {\\n      \\"column\\": \\"code\\",\\n      \\"properties\\": {\\n        \\"dtype\\": \\"string\\",\\n        \\"num_unique_values\\": 5,\\n        \\"samples\\": [\\n          \\"HEIGHT\\"\\n        ],\\n        \\"semantic_type\\": \\"\\",\\n        \\"description\\": \\"\\"\\n      }\\n    },\\n    {\\n      \\"column\\": \\"numeric_value\\",\\n      \\"properties\\": {\\n        \\"dtype\\": \\"float32\\",\\n        \\"num_unique_values\\": 2,\\n        \\"samples\\": [\\n          142.0\\n        ],\\n        \\"semantic_type\\": \\"\\",\\n        \\"description\\": \\"\\"\\n      }\\n    }\\n  ]\\n}"}},"metadata":{}}]},{"cell_type":"markdown","source":["### MEDS Metadata Files (`metadata/**`)\\n","In addition to the data files, we also have metadata files `codes.parquet`, `dataset.json`, and `subject_splits.parquet`. Let\'s check those out now:"],"metadata":{"id":"pfm_FtrfNC_y"}},{"cell_type":"markdown","source":["#### `codes.parquet`\\n","This helps users understand the vocabulary of codes in a given dataset -- and it can be a source to link codes in the dataset to external ontologies or vocabularies."],"metadata":{"id":"1RopBvZaOGY6"}},{"cell_type":"code","source":["pd.read_parquet(data_root / \\"metadata\\" / \\"codes.parquet\\").head(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"F9IHT9kTOMsD","outputId":"e7861c29-8300-4b33-bc4d-de73503e448d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["               code                             description    parent_codes\\n","0   EYE_COLOR//BLUE      Blue Eyes. Less common than brown.            None\\n","1  EYE_COLOR//BROWN  Brown Eyes. The most common eye color.            None\\n","2  EYE_COLOR//HAZEL          Hazel eyes. These are uncommon            None\\n","3                HR                              Heart Rate  [LOINC/8867-4]\\n","4              TEMP                        Body Temperature  [LOINC/8310-5]"],"text/html":["\\n","  <div id=\\"df-67906d59-5913-4e91-bba9-24ec1a097adb\\" class=\\"colab-df-container\\">\\n","    <div>\\n","<style scoped>\\n","    .dataframe tbody tr th:only-of-type {\\n","        vertical-align: middle;\\n","    }\\n","\\n","    .dataframe tbody tr th {\\n","        vertical-align: top;\\n","    }\\n","\\n","    .dataframe thead th {\\n","        text-align: right;\\n","    }\\n","</style>\\n","<table border=\\"1\\" class=\\"dataframe\\">\\n","  <thead>\\n","    <tr style=\\"text-align: right;\\">\\n","      <th></th>\\n","      <th>code</th>\\n","      <th>description</th>\\n","      <th>parent_codes</th>\\n","    </tr>\\n","  </thead>\\n","  <tbody>\\n","    <tr>\\n","      <th>0</th>\\n","      <td>EYE_COLOR//BLUE</td>\\n","      <td>Blue Eyes. Less common than brown.</td>\\n","      <td>None</td>\\n","    </tr>\\n","    <tr>\\n","      <th>1</th>\\n","      <td>EYE_COLOR//BROWN</td>\\n","      <td>Brown Eyes. The most common eye color.</td>\\n","      <td>None</td>\\n","    </tr>\\n","    <tr>\\n","      <th>2</th>\\n","      <td>EYE_COLOR//HAZEL</td>\\n","      <td>Hazel eyes. These are uncommon</td>\\n","      <td>None</td>\\n","    </tr>\\n","    <tr>\\n","      <th>3</th>\\n","      <td>HR</td>\\n","      <td>Heart Rate</td>\\n","      <td>[LOINC/8867-4]</td>\\n","    </tr>\\n","    <tr>\\n","      <th>4</th>\\n","      <td>TEMP</td>\\n","      <td>Body Temperature</td>\\n","      <td>[LOINC/8310-5]</td>\\n","    </tr>\\n","  </tbody>\\n","</table>\\n","</div>\\n","    <div class=\\"colab-df-buttons\\">\\n","\\n","  <div class=\\"colab-df-container\\">\\n","    <button class=\\"colab-df-convert\\" onclick=\\"convertToInteractive(\'df-67906d59-5913-4e91-bba9-24ec1a097adb\')\\"\\n","            title=\\"Convert this dataframe to an interactive table.\\"\\n","            style=\\"display:none;\\">\\n","\\n","  <svg xmlns=\\"http://www.w3.org/2000/svg\\" height=\\"24px\\" viewBox=\\"0 -960 960 960\\">\\n","    <path d=\\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\\"/>\\n","  </svg>\\n","    </button>\\n","\\n","  <style>\\n","    .colab-df-container {\\n","      display:flex;\\n","      gap: 12px;\\n","    }\\n","\\n","    .colab-df-convert {\\n","      background-color: #E8F0FE;\\n","      border: none;\\n","      border-radius: 50%;\\n","      cursor: pointer;\\n","      display: none;\\n","      fill: #1967D2;\\n","      height: 32px;\\n","      padding: 0 0 0 0;\\n","      width: 32px;\\n","    }\\n","\\n","    .colab-df-convert:hover {\\n","      background-color: #E2EBFA;\\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\\n","      fill: #174EA6;\\n","    }\\n","\\n","    .colab-df-buttons div {\\n","      margin-bottom: 4px;\\n","    }\\n","\\n","    [theme=dark] .colab-df-convert {\\n","      background-color: #3B4455;\\n","      fill: #D2E3FC;\\n","    }\\n","\\n","    [theme=dark] .colab-df-convert:hover {\\n","      background-color: #434B5C;\\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\\n","      fill: #FFFFFF;\\n","    }\\n","  </style>\\n","\\n","    <script>\\n","      const buttonEl =\\n","        document.querySelector(\'#df-67906d59-5913-4e91-bba9-24ec1a097adb button.colab-df-convert\');\\n","      buttonEl.style.display =\\n","        google.colab.kernel.accessAllowed ? \'block\' : \'none\';\\n","\\n","      async function convertToInteractive(key) {\\n","        const element = document.querySelector(\'#df-67906d59-5913-4e91-bba9-24ec1a097adb\');\\n","        const dataTable =\\n","          await google.colab.kernel.invokeFunction(\'convertToInteractive\',\\n","                                                    [key], {});\\n","        if (!dataTable) return;\\n","\\n","        const docLinkHtml = \'Like what you see? Visit the \' +\\n","          \'<a target=\\"_blank\\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>\'\\n","          + \' to learn more about interactive tables.\';\\n","        element.innerHTML = \'\';\\n","        dataTable[\'output_type\'] = \'display_data\';\\n","        await google.colab.output.renderOutput(dataTable, element);\\n","        const docLink = document.createElement(\'div\');\\n","        docLink.innerHTML = docLinkHtml;\\n","        element.appendChild(docLink);\\n","      }\\n","    <\/script>\\n","  </div>\\n","\\n","\\n","    <div id=\\"df-51e8a9cd-9f21-4dd7-90a3-0e6e65d47f5d\\">\\n","      <button class=\\"colab-df-quickchart\\" onclick=\\"quickchart(\'df-51e8a9cd-9f21-4dd7-90a3-0e6e65d47f5d\')\\"\\n","                title=\\"Suggest charts\\"\\n","                style=\\"display:none;\\">\\n","\\n","<svg xmlns=\\"http://www.w3.org/2000/svg\\" height=\\"24px\\"viewBox=\\"0 0 24 24\\"\\n","     width=\\"24px\\">\\n","    <g>\\n","        <path d=\\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\\"/>\\n","    </g>\\n","</svg>\\n","      </button>\\n","\\n","<style>\\n","  .colab-df-quickchart {\\n","      --bg-color: #E8F0FE;\\n","      --fill-color: #1967D2;\\n","      --hover-bg-color: #E2EBFA;\\n","      --hover-fill-color: #174EA6;\\n","      --disabled-fill-color: #AAA;\\n","      --disabled-bg-color: #DDD;\\n","  }\\n","\\n","  [theme=dark] .colab-df-quickchart {\\n","      --bg-color: #3B4455;\\n","      --fill-color: #D2E3FC;\\n","      --hover-bg-color: #434B5C;\\n","      --hover-fill-color: #FFFFFF;\\n","      --disabled-bg-color: #3B4455;\\n","      --disabled-fill-color: #666;\\n","  }\\n","\\n","  .colab-df-quickchart {\\n","    background-color: var(--bg-color);\\n","    border: none;\\n","    border-radius: 50%;\\n","    cursor: pointer;\\n","    display: none;\\n","    fill: var(--fill-color);\\n","    height: 32px;\\n","    padding: 0;\\n","    width: 32px;\\n","  }\\n","\\n","  .colab-df-quickchart:hover {\\n","    background-color: var(--hover-bg-color);\\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\\n","    fill: var(--button-hover-fill-color);\\n","  }\\n","\\n","  .colab-df-quickchart-complete:disabled,\\n","  .colab-df-quickchart-complete:disabled:hover {\\n","    background-color: var(--disabled-bg-color);\\n","    fill: var(--disabled-fill-color);\\n","    box-shadow: none;\\n","  }\\n","\\n","  .colab-df-spinner {\\n","    border: 2px solid var(--fill-color);\\n","    border-color: transparent;\\n","    border-bottom-color: var(--fill-color);\\n","    animation:\\n","      spin 1s steps(1) infinite;\\n","  }\\n","\\n","  @keyframes spin {\\n","    0% {\\n","      border-color: transparent;\\n","      border-bottom-color: var(--fill-color);\\n","      border-left-color: var(--fill-color);\\n","    }\\n","    20% {\\n","      border-color: transparent;\\n","      border-left-color: var(--fill-color);\\n","      border-top-color: var(--fill-color);\\n","    }\\n","    30% {\\n","      border-color: transparent;\\n","      border-left-color: var(--fill-color);\\n","      border-top-color: var(--fill-color);\\n","      border-right-color: var(--fill-color);\\n","    }\\n","    40% {\\n","      border-color: transparent;\\n","      border-right-color: var(--fill-color);\\n","      border-top-color: var(--fill-color);\\n","    }\\n","    60% {\\n","      border-color: transparent;\\n","      border-right-color: var(--fill-color);\\n","    }\\n","    80% {\\n","      border-color: transparent;\\n","      border-right-color: var(--fill-color);\\n","      border-bottom-color: var(--fill-color);\\n","    }\\n","    90% {\\n","      border-color: transparent;\\n","      border-bottom-color: var(--fill-color);\\n","    }\\n","  }\\n","</style>\\n","\\n","      <script>\\n","        async function quickchart(key) {\\n","          const quickchartButtonEl =\\n","            document.querySelector(\'#\' + key + \' button\');\\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\\n","          quickchartButtonEl.classList.add(\'colab-df-spinner\');\\n","          try {\\n","            const charts = await google.colab.kernel.invokeFunction(\\n","                \'suggestCharts\', [key], {});\\n","          } catch (error) {\\n","            console.error(\'Error during call to suggestCharts:\', error);\\n","          }\\n","          quickchartButtonEl.classList.remove(\'colab-df-spinner\');\\n","          quickchartButtonEl.classList.add(\'colab-df-quickchart-complete\');\\n","        }\\n","        (() => {\\n","          let quickchartButtonEl =\\n","            document.querySelector(\'#df-51e8a9cd-9f21-4dd7-90a3-0e6e65d47f5d button\');\\n","          quickchartButtonEl.style.display =\\n","            google.colab.kernel.accessAllowed ? \'block\' : \'none\';\\n","        })();\\n","      <\/script>\\n","    </div>\\n","\\n","    </div>\\n","  </div>\\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\\n  \\"name\\": \\"pd\\",\\n  \\"rows\\": 5,\\n  \\"fields\\": [\\n    {\\n      \\"column\\": \\"code\\",\\n      \\"properties\\": {\\n        \\"dtype\\": \\"string\\",\\n        \\"num_unique_values\\": 5,\\n        \\"samples\\": [\\n          \\"EYE_COLOR//BROWN\\",\\n          \\"TEMP\\",\\n          \\"EYE_COLOR//HAZEL\\"\\n        ],\\n        \\"semantic_type\\": \\"\\",\\n        \\"description\\": \\"\\"\\n      }\\n    },\\n    {\\n      \\"column\\": \\"description\\",\\n      \\"properties\\": {\\n        \\"dtype\\": \\"string\\",\\n        \\"num_unique_values\\": 5,\\n        \\"samples\\": [\\n          \\"Brown Eyes. The most common eye color.\\",\\n          \\"Body Temperature\\",\\n          \\"Hazel eyes. These are uncommon\\"\\n        ],\\n        \\"semantic_type\\": \\"\\",\\n        \\"description\\": \\"\\"\\n      }\\n    },\\n    {\\n      \\"column\\": \\"parent_codes\\",\\n      \\"properties\\": {\\n        \\"dtype\\": \\"object\\",\\n        \\"semantic_type\\": \\"\\",\\n        \\"description\\": \\"\\"\\n      }\\n    }\\n  ]\\n}"}},"metadata":{},"execution_count":5}]},{"cell_type":"markdown","source":["#### `dataset.json`\\n","This file has basic metadata about the dataset, used for tracking and versioining results using the dataset. In this case, as this is a testing dataset, it is empty, but you\'ll see some other datasets later where it will be filled in."],"metadata":{"id":"riYz-WcjOIVr"}},{"cell_type":"code","source":["print(Path(data_root / \\"metadata\\" / \\"dataset.json\\").read_text())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yiBPQckILdAf","outputId":"827abf2b-7e3a-4266-e801-f402450e1009"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{}\\n"]}]},{"cell_type":"markdown","source":["#### `subject_splits.parquet`\\n","This file allows a data owner to perscribe a specific data split to use in downstream modeling, to ensure results are maximally comparable. The split names used in MEDS are `train`, for the training set; `tuning`, for the set of patients you may use for hyperparameter tuning, etc., but are not part of the final held-out test set (often called \\"dev\\" or \\"val\\"); and `held_out`, for the held-out set of patients (often called \\"test\\"). Users can, however, also include other, special splits corresponding to additional sets of patients held-out for other reasons specific to that dataset (e.g., dedicated, existing internal held-out sets for different projects)."],"metadata":{"id":"qTyl0RXKOLip"}},{"cell_type":"code","source":["pd.read_parquet(data_root / \\"metadata\\" / \\"subject_splits.parquet\\").head(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"Z37_vpQKOWIA","outputId":"2d9bc8d0-b573-49d3-f612-aefc212a77d5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   subject_id   split\\n","0      239684   train\\n","1     1195293   train\\n","2       68729   train\\n","3      814703   train\\n","4      754281  tuning"],"text/html":["\\n","  <div id=\\"df-457f39e6-0768-49d8-b331-e2c4b29b97bc\\" class=\\"colab-df-container\\">\\n","    <div>\\n","<style scoped>\\n","    .dataframe tbody tr th:only-of-type {\\n","        vertical-align: middle;\\n","    }\\n","\\n","    .dataframe tbody tr th {\\n","        vertical-align: top;\\n","    }\\n","\\n","    .dataframe thead th {\\n","        text-align: right;\\n","    }\\n","</style>\\n","<table border=\\"1\\" class=\\"dataframe\\">\\n","  <thead>\\n","    <tr style=\\"text-align: right;\\">\\n","      <th></th>\\n","      <th>subject_id</th>\\n","      <th>split</th>\\n","    </tr>\\n","  </thead>\\n","  <tbody>\\n","    <tr>\\n","      <th>0</th>\\n","      <td>239684</td>\\n","      <td>train</td>\\n","    </tr>\\n","    <tr>\\n","      <th>1</th>\\n","      <td>1195293</td>\\n","      <td>train</td>\\n","    </tr>\\n","    <tr>\\n","      <th>2</th>\\n","      <td>68729</td>\\n","      <td>train</td>\\n","    </tr>\\n","    <tr>\\n","      <th>3</th>\\n","      <td>814703</td>\\n","      <td>train</td>\\n","    </tr>\\n","    <tr>\\n","      <th>4</th>\\n","      <td>754281</td>\\n","      <td>tuning</td>\\n","    </tr>\\n","  </tbody>\\n","</table>\\n","</div>\\n","    <div class=\\"colab-df-buttons\\">\\n","\\n","  <div class=\\"colab-df-container\\">\\n","    <button class=\\"colab-df-convert\\" onclick=\\"convertToInteractive(\'df-457f39e6-0768-49d8-b331-e2c4b29b97bc\')\\"\\n","            title=\\"Convert this dataframe to an interactive table.\\"\\n","            style=\\"display:none;\\">\\n","\\n","  <svg xmlns=\\"http://www.w3.org/2000/svg\\" height=\\"24px\\" viewBox=\\"0 -960 960 960\\">\\n","    <path d=\\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\\"/>\\n","  </svg>\\n","    </button>\\n","\\n","  <style>\\n","    .colab-df-container {\\n","      display:flex;\\n","      gap: 12px;\\n","    }\\n","\\n","    .colab-df-convert {\\n","      background-color: #E8F0FE;\\n","      border: none;\\n","      border-radius: 50%;\\n","      cursor: pointer;\\n","      display: none;\\n","      fill: #1967D2;\\n","      height: 32px;\\n","      padding: 0 0 0 0;\\n","      width: 32px;\\n","    }\\n","\\n","    .colab-df-convert:hover {\\n","      background-color: #E2EBFA;\\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\\n","      fill: #174EA6;\\n","    }\\n","\\n","    .colab-df-buttons div {\\n","      margin-bottom: 4px;\\n","    }\\n","\\n","    [theme=dark] .colab-df-convert {\\n","      background-color: #3B4455;\\n","      fill: #D2E3FC;\\n","    }\\n","\\n","    [theme=dark] .colab-df-convert:hover {\\n","      background-color: #434B5C;\\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\\n","      fill: #FFFFFF;\\n","    }\\n","  </style>\\n","\\n","    <script>\\n","      const buttonEl =\\n","        document.querySelector(\'#df-457f39e6-0768-49d8-b331-e2c4b29b97bc button.colab-df-convert\');\\n","      buttonEl.style.display =\\n","        google.colab.kernel.accessAllowed ? \'block\' : \'none\';\\n","\\n","      async function convertToInteractive(key) {\\n","        const element = document.querySelector(\'#df-457f39e6-0768-49d8-b331-e2c4b29b97bc\');\\n","        const dataTable =\\n","          await google.colab.kernel.invokeFunction(\'convertToInteractive\',\\n","                                                    [key], {});\\n","        if (!dataTable) return;\\n","\\n","        const docLinkHtml = \'Like what you see? Visit the \' +\\n","          \'<a target=\\"_blank\\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>\'\\n","          + \' to learn more about interactive tables.\';\\n","        element.innerHTML = \'\';\\n","        dataTable[\'output_type\'] = \'display_data\';\\n","        await google.colab.output.renderOutput(dataTable, element);\\n","        const docLink = document.createElement(\'div\');\\n","        docLink.innerHTML = docLinkHtml;\\n","        element.appendChild(docLink);\\n","      }\\n","    <\/script>\\n","  </div>\\n","\\n","\\n","    <div id=\\"df-0cb69de5-e60f-4824-918e-4c2611219074\\">\\n","      <button class=\\"colab-df-quickchart\\" onclick=\\"quickchart(\'df-0cb69de5-e60f-4824-918e-4c2611219074\')\\"\\n","                title=\\"Suggest charts\\"\\n","                style=\\"display:none;\\">\\n","\\n","<svg xmlns=\\"http://www.w3.org/2000/svg\\" height=\\"24px\\"viewBox=\\"0 0 24 24\\"\\n","     width=\\"24px\\">\\n","    <g>\\n","        <path d=\\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\\"/>\\n","    </g>\\n","</svg>\\n","      </button>\\n","\\n","<style>\\n","  .colab-df-quickchart {\\n","      --bg-color: #E8F0FE;\\n","      --fill-color: #1967D2;\\n","      --hover-bg-color: #E2EBFA;\\n","      --hover-fill-color: #174EA6;\\n","      --disabled-fill-color: #AAA;\\n","      --disabled-bg-color: #DDD;\\n","  }\\n","\\n","  [theme=dark] .colab-df-quickchart {\\n","      --bg-color: #3B4455;\\n","      --fill-color: #D2E3FC;\\n","      --hover-bg-color: #434B5C;\\n","      --hover-fill-color: #FFFFFF;\\n","      --disabled-bg-color: #3B4455;\\n","      --disabled-fill-color: #666;\\n","  }\\n","\\n","  .colab-df-quickchart {\\n","    background-color: var(--bg-color);\\n","    border: none;\\n","    border-radius: 50%;\\n","    cursor: pointer;\\n","    display: none;\\n","    fill: var(--fill-color);\\n","    height: 32px;\\n","    padding: 0;\\n","    width: 32px;\\n","  }\\n","\\n","  .colab-df-quickchart:hover {\\n","    background-color: var(--hover-bg-color);\\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\\n","    fill: var(--button-hover-fill-color);\\n","  }\\n","\\n","  .colab-df-quickchart-complete:disabled,\\n","  .colab-df-quickchart-complete:disabled:hover {\\n","    background-color: var(--disabled-bg-color);\\n","    fill: var(--disabled-fill-color);\\n","    box-shadow: none;\\n","  }\\n","\\n","  .colab-df-spinner {\\n","    border: 2px solid var(--fill-color);\\n","    border-color: transparent;\\n","    border-bottom-color: var(--fill-color);\\n","    animation:\\n","      spin 1s steps(1) infinite;\\n","  }\\n","\\n","  @keyframes spin {\\n","    0% {\\n","      border-color: transparent;\\n","      border-bottom-color: var(--fill-color);\\n","      border-left-color: var(--fill-color);\\n","    }\\n","    20% {\\n","      border-color: transparent;\\n","      border-left-color: var(--fill-color);\\n","      border-top-color: var(--fill-color);\\n","    }\\n","    30% {\\n","      border-color: transparent;\\n","      border-left-color: var(--fill-color);\\n","      border-top-color: var(--fill-color);\\n","      border-right-color: var(--fill-color);\\n","    }\\n","    40% {\\n","      border-color: transparent;\\n","      border-right-color: var(--fill-color);\\n","      border-top-color: var(--fill-color);\\n","    }\\n","    60% {\\n","      border-color: transparent;\\n","      border-right-color: var(--fill-color);\\n","    }\\n","    80% {\\n","      border-color: transparent;\\n","      border-right-color: var(--fill-color);\\n","      border-bottom-color: var(--fill-color);\\n","    }\\n","    90% {\\n","      border-color: transparent;\\n","      border-bottom-color: var(--fill-color);\\n","    }\\n","  }\\n","</style>\\n","\\n","      <script>\\n","        async function quickchart(key) {\\n","          const quickchartButtonEl =\\n","            document.querySelector(\'#\' + key + \' button\');\\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\\n","          quickchartButtonEl.classList.add(\'colab-df-spinner\');\\n","          try {\\n","            const charts = await google.colab.kernel.invokeFunction(\\n","                \'suggestCharts\', [key], {});\\n","          } catch (error) {\\n","            console.error(\'Error during call to suggestCharts:\', error);\\n","          }\\n","          quickchartButtonEl.classList.remove(\'colab-df-spinner\');\\n","          quickchartButtonEl.classList.add(\'colab-df-quickchart-complete\');\\n","        }\\n","        (() => {\\n","          let quickchartButtonEl =\\n","            document.querySelector(\'#df-0cb69de5-e60f-4824-918e-4c2611219074 button\');\\n","          quickchartButtonEl.style.display =\\n","            google.colab.kernel.accessAllowed ? \'block\' : \'none\';\\n","        })();\\n","      <\/script>\\n","    </div>\\n","\\n","    </div>\\n","  </div>\\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\\n  \\"name\\": \\"pd\\",\\n  \\"rows\\": 5,\\n  \\"fields\\": [\\n    {\\n      \\"column\\": \\"subject_id\\",\\n      \\"properties\\": {\\n        \\"dtype\\": \\"number\\",\\n        \\"std\\": 456971,\\n        \\"min\\": 68729,\\n        \\"max\\": 1195293,\\n        \\"num_unique_values\\": 5,\\n        \\"samples\\": [\\n          1195293,\\n          754281,\\n          68729\\n        ],\\n        \\"semantic_type\\": \\"\\",\\n        \\"description\\": \\"\\"\\n      }\\n    },\\n    {\\n      \\"column\\": \\"split\\",\\n      \\"properties\\": {\\n        \\"dtype\\": \\"category\\",\\n        \\"num_unique_values\\": 2,\\n        \\"samples\\": [\\n          \\"tuning\\",\\n          \\"train\\"\\n        ],\\n        \\"semantic_type\\": \\"\\",\\n        \\"description\\": \\"\\"\\n      }\\n    }\\n  ]\\n}"}},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","source":["### Using MEDS Data\\n","How can we use these files to answer a simple question? Let\'s try plotting to see if there is a correlation in this dataset between the patient\'s height and their max heart rate."],"metadata":{"id":"21Z0egSRNfti"}},{"cell_type":"code","source":["from matplotlib import pyplot as plt\\n","import numpy as np\\n","\\n","# For this hypothetical question, we\'ll just use all the data\\n","df = pd.concat(\\n","    [pd.read_parquet(fp) for fp in (data_root / \\"data\\").rglob(\\"*.parquet\\")]\\n",")\\n","\\n","max_HR_df = df[df.code == \\"HR\\"].groupby(\\"subject_id\\")[\\"numeric_value\\"].max()\\n","\\n","subjects = max_HR_df.index\\n","\\n","height = (\\n","    df[df.code == \\"HEIGHT\\"]\\n","    .set_index(\\"subject_id\\")\\n","    .loc[subjects]\\n","    [\\"numeric_value\\"]\\n",")\\n","\\n","plt.scatter(height, max_HR_df)\\n","plt.xlabel(\\"Height (cm)\\")\\n","plt.ylabel(\\"Max HR (bpm)\\")\\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":449},"id":"iTvXjh3DO4mr","outputId":"de9a0e8f-0c28-4def-a4b6-fcdda6c60c39"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\\n"},"metadata":{}}]},{"cell_type":"markdown","source":["Alas, here we see no clear relationship -- though this does make sense as this dataset is, after all, purely random! But hopefully through this simple example you see how you can begin to manipulate MEDS formatted data to perform modeling tasks. Beyond that, maybe you even see how such processes might be easier to standardize across different EHR systems.\\n","\\n","This is clearly an overly simplified example, but if you want to explore the basics of MEDS further and see how you can build real models on MEDS, with no external MEDS-specific packages required, you can check out [this additional tutorial](https://colab.research.google.com/drive/1xjqEcLkrxBokKnK-TBL-YUnfp6ImycWn#scrollTo=nac1yvWs3Z4p) which explores these ideas in more depth!"],"metadata":{"id":"I5r01BRiQFB-"}},{"cell_type":"markdown","source":["## MEDS Ecosystem\\n","\\n","<p align=\\"center\\">\\n","  <img alt=\\"MEDS Ecosystem\\" width=\\"60%\\" src=\\"https://raw.githubusercontent.com/Medical-Event-Data-Standard/medical-event-data-standard.github.io/refs/heads/main/static/img/ecosystem_figure.svg\\">\\n","</p>\\n","\\n","It is exactly the ideas explored in our simple plotting task that empower the growth of the MEDS ecosystem. There are a lot of things in that ecosystem, including utilities for task extraction, tabular baseline generation, model building, evaluation, and more! Check out some of the projects that use MEDS [here](https://medical-event-data-standard.github.io/docs/intro_pages/ecosystem)!"],"metadata":{"id":"M08GqBeGMJOf"}},{"cell_type":"code","source":[],"metadata":{"id":"KlOWP4GXQl5K"},"execution_count":null,"outputs":[]}]}'),i={sidebar_position:1},s="Getting Familiar with MEDS",A={},p=[];function u(n){const t={a:"a",h1:"h1",header:"header",p:"p",...(0,r.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"getting-familiar-with-meds",children:"Getting Familiar with MEDS"})}),"\n",(0,a.jsxs)(t.p,{children:["Before we start building datasets and models using the MEDS ecosystem, we need to understand what the MEDS\nschema is and how it can be used to represent medical data. This tutorial does exactly that, with a simple\nintroduction to the file format, layout, and what MEDS is all about. Check it out in the jupyter\nnotebook tutorial below, or see it on ",(0,a.jsx)(t.a,{href:"https://colab.research.google.com/github/Medical-Event-Data-Standard/medical-event-data-standard.github.io/blob/main/tutorial_notebooks/KDD_tutorial/What_is_MEDS.ipynb",children:"Google\nColab"}),"\nor on our ",(0,a.jsx)(t.a,{href:"https://github.com/Medical-Event-Data-Standard/medical-event-data-standard.github.io/blob/main/tutorial_notebooks/KDD_tutorial/What_is_MEDS.ipynb",children:"GitHub\nRepository"})]}),"\n",(0,a.jsx)(d(),{showLineNumbers:!0,mediaAlign:"left",rawIpynb:c})]})}function b(n={}){const{wrapper:t}={...(0,r.R)(),...n.components};return t?(0,a.jsx)(t,{...n,children:(0,a.jsx)(u,{...n})}):u(n)}}}]);