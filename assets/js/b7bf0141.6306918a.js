"use strict";(self.webpackChunktemp=self.webpackChunktemp||[]).push([[958],{86056:(e,a,t)=>{t.d(a,{Z:()=>r});var s=t(94335);const n=9e5;async function r(e,a=null,t=n){const r=a||e,{data:o,isFresh:i}=function(e,a=n){const t=localStorage.getItem(e);if(!t)return{data:null,isFresh:!1};try{const{data:e,timestamp:s}=JSON.parse(t);return{data:e,isFresh:Date.now()-s<a}}catch(s){return console.warn(`Cache read for ${e} failed: ${s}. Clearing...`),localStorage.removeItem(e),{data:null,isFresh:!1}}}(r,t);if(i)return o;try{const a=await async function(e){try{return(await s.A.get(e)).data}catch(a){return console.error(`Failed to fetch data from ${e}:`,a),null}}(e);return localStorage.setItem(r,JSON.stringify({data:a,timestamp:Date.now()})),a}catch(c){if(console.warn(`Failed to fetch ${e}:`,c),o)return console.warn(`Using stale cached data for ${r}`),o;throw new Error(`Failed to fetch ${e} and no cached data available.`)}}},90930:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>j,contentTitle:()=>x,default:()=>A,frontMatter:()=>w,metadata:()=>s,toc:()=>T});const s=JSON.parse('{"id":"intro_pages/ecosystem","title":"MEDS Ecosystem","description":"","source":"@site/docs/intro_pages/3_ecosystem.mdx","sourceDirName":"intro_pages","slug":"/intro_pages/ecosystem","permalink":"/docs/intro_pages/ecosystem","draft":false,"unlisted":false,"editUrl":"https://github.com/Medical-Event-Data-Standard/medical-event-data-standard.github.io/tree/main/docs/docs/intro_pages/3_ecosystem.mdx","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"mainSidebar","previous":{"title":"Build a (Neural Network) Model over MEDS data","permalink":"/docs/tutorials/kdd2025/build_a_model_NN"},"next":{"title":"Future Roadmap","permalink":"/docs/intro_pages/roadmap"}}');var n=t(74848),r=t(28453),o=t(96540);function i(e,a){const t={...e.packages},s={...e.topics},n={...e.topicPackages},{packages:r,topics:o,topicPackages:i}=a;for(const c of Object.values(o))s[c.name]?s[c.name]!==c&&(console.warn(`Duplicate dissenting topic name: ${c.name}`),console.warn("Original:",s[c.name]),console.warn("Duplicate:",c)):s[c.name]=c;for(const c of Object.values(r))t[c.name]?t[c.name]===c?console.log(`Duplicate identical package name: ${c.name}`):(console.warn(`Duplicate dissenting package name: ${c.name}`),console.warn("Original:",t[c.name]),console.warn("Duplicate:",c)):t[c.name]=c;for(const c in i)n[c]||(n[c]=[]),n[c].push(...i[c]);return{packages:t,topics:s,topicPackages:n}}function c(e,a=null){let t={packages:{},topics:{},topicPackages:{}};for(const s of Object.values(e))t=i(t,l(s,a));return t}function l(e,a=null){const{name:t,description:s,icon:n,packages:r,...o}=e,l=a?`${a}/${t}`:t,p={name:l,icon:n},d={...p,description:s,featured:[]},m={};m[l]=d;const u={},h={};h[l]=[];for(const i of r||[]){const{topics:e=[]}=i,a={name:i.name,githubRepo:i.github_repo,warn:i.warn,demoAvailable:i.demo_available,docsUrl:i.docs_url,paperUrl:i.paper_url,pypiName:i.pypi_name,topics:[p],medsDev:i["MEDS-DEV"]?{entityType:i["MEDS-DEV"].entity_type,name:i["MEDS-DEV"].name}:void 0};u[a.name]=a,d.featured?.push(a.name),h[l].push(a.name);for(const t of e){const e={name:t};m[t]||(m[t]=e),h[t]||(h[t]=[]),h[t].push(a.name),a.topics?.push(e)}}if(!o)return{packages:u,topics:m,topicPackages:h};const g={};for(const[i,c]of Object.entries(o))"object"==typeof c?g[i]=c:console.warn(`Invalid subcategory format for ${i}:`,c);const f=c(g,l);for(const[i,c]of Object.entries(f.packages))c.topics||(c.topics=[]),c.topics.push(p),m[l].featured?.push(i),h[l].push(i);return i({packages:u,topics:m,topicPackages:h},f)}var p=t(32673),d=t(21645),m=t(87968),u=t(2825),h=t(56347),g=t(49631),f=t(4624),_=t(35124),b=t(42314),E=t(1846),S=t(86056);async function M(e){if(!e.githubRepo)return{...e,stars:null,lastUpdated:null,release:null};const a=await async function(e){if(!e.githubRepo)throw new Error(`Package ${e.name} does not have a GitHub repository.`);const a=`https://api.github.com/repos/${e.githubRepo}`;return(0,S.Z)(a)}(e);a||console.warn(`No repository info found for package ${e.name}`);const{stargazers_count:t=null,updated_at:s=null}=a||{},n=s?new Date(s):null,r=await async function(e){if(!e.githubRepo)throw new Error(`Package ${e.name} does not have a GitHub repository.`);const a=`https://api.github.com/repos/${e.githubRepo}/releases/latest`;return(0,S.Z)(a)}(e);let o=null;return r&&r.tag_name?o=r.tag_name:console.warn(`No release info found for package ${e.name}`),{...e,stars:t,lastUpdated:n,release:o}}function D({pkg:e}){const[a,t]=(0,o.useState)(null);return(0,o.useEffect)((()=>{M(e).then(t)}),[e]),a?(0,n.jsxs)(g.A,{variant:"outlined",children:[(0,n.jsxs)(f.A,{children:[(0,n.jsx)(_.A,{variant:"h6",children:a.name}),a.warn&&(0,n.jsx)(_.A,{color:"warning.main",children:a.warn}),a.demoAvailable&&(0,n.jsx)(_.A,{variant:"body2",children:"\ud83d\ude80 Demo Available"}),null!==a.stars&&(0,n.jsxs)(_.A,{variant:"body2",children:["\u2b50 ",a.stars," stars"]}),a.release&&(0,n.jsxs)(_.A,{variant:"body2",children:["\ud83d\udce6 ",a.release]})]}),(0,n.jsxs)(b.A,{children:[a.githubRepo&&(0,n.jsx)(E.A,{href:`https://github.com/${a.githubRepo}`,target:"_blank",children:"GitHub"}),a.docsUrl&&(0,n.jsx)(E.A,{href:a.docsUrl,target:"_blank",children:"Docs"}),a.paperUrl&&(0,n.jsx)(E.A,{href:a.paperUrl,target:"_blank",children:"Paper"}),a.pypiName&&(0,n.jsx)(E.A,{href:`https://pypi.org/project/${a.pypiName}`,target:"_blank",children:"PyPI"})]})]}):null}function v({packages:e,topics:a,topicPackages:t}){const s=(0,h.zy)(),r=(0,h.W6)(),i=o.useMemo((()=>new URLSearchParams(s.search)),[s.search]),[c,l]=(0,o.useState)(i.get("search")??""),[g,f]=(0,o.useState)((()=>new Set((i.get("topics")??"").split(",").filter((e=>e)))));(0,o.useEffect)((()=>{const e=new URLSearchParams;c&&e.set("search",c),g.size>0&&e.set("topics",Array.from(g).join(",")),r.replace({...s,search:e.toString()})}),[c,g,r,s]),(0,o.useEffect)((()=>{const e=new URLSearchParams(s.search);l(e.get("search")??""),f(new Set((e.get("topics")??"").split(",").filter((e=>e))))}),[s.search]);const _=Object.values(e).filter((e=>{const a=e.name.toLowerCase().includes(c.toLowerCase());if(0===g.size)return a;const s=[...g].some((a=>t[a]?.includes(e.name)));return a&&s}));return(0,n.jsxs)(p.A,{children:[(0,n.jsx)(d.A,{label:"Search packages",variant:"outlined",fullWidth:!0,sx:{mb:2},value:c,onChange:e=>l(e.target.value)}),(0,n.jsx)(p.A,{sx:{mb:2},children:Object.values(a).map((e=>(0,n.jsx)(m.A,{label:e.name,onClick:()=>(e=>{f((a=>{const t=new Set(a);return t.has(e)?t.delete(e):t.add(e),new Set(t)}))})(e.name),color:g.has(e.name)?"primary":"default",sx:{mr:1,mb:1}},e.name)))}),(0,n.jsx)(u.A,{container:!0,spacing:2,children:_.map((e=>(0,n.jsx)(u.A,{size:{xs:12,sm:6,md:4},children:(0,n.jsx)(D,{pkg:e})},e.name)))})]})}function k({data:e}){const{packages:a,topics:t,topicPackages:s}=c(e);return(0,n.jsx)(v,{packages:a,topics:t,topicPackages:s})}const y={tools:{name:"Tools",description:"Tools/packages for working with MEDS datasets across various AI tasks",icon:"Build",core:{name:"MEDS Core",description:"Core components of the MEDS ecosystem, including the schema and fundamental utilities.",packages:[{name:"MEDS Schema",pypi_name:"meds",github_repo:"Medical-Event-Data-Standard/meds"}]},preprocessing:{name:"Preprocessing",description:"Tools for preprocessing EHR data that is in the MEDS format or for building custom ETLs.",packages:[{name:"MEDS-Reader",pypi_name:"meds-reader",github_repo:"som-shahlab/meds_reader",docs_url:"https://meds-reader.readthedocs.io"},{name:"MEDS Transforms",pypi_name:"MEDS-Transforms",github_repo:"mmcdermott/MEDS_transforms",docs_url:"https://meds-transforms.readthedocs.io"}]},exploration:{name:"Exploration and Visualization",description:"Tools for exploring, visualizing, and understanding MEDS datasets.",packages:[{name:"MEDS-Inspect",pypi_name:"MEDS-Inspect",github_repo:"rvandewater/MEDS-Inspect"}]},task_extraction:{name:"Task Extraction",description:"Tools for extracting prediction task cohorts from MEDS datasets.",packages:[{name:"ACES",paper_url:"https://openreview.net/forum?id=P4XmKjXTrM",pypi_name:"es-aces",github_repo:"justin13601/ACES",docs_url:"https://eventstreamaces.readthedocs.io"}]},model_evaluation:{name:"Model Evaluation",description:"Tools for evaluating models trained on MEDS datasets.",packages:[{name:"meds-evaluation",pypi_name:"meds-evaluation",github_repo:"kamilest/meds-evaluation"}]},testing:{name:"Testing",description:"Utilities and fixtures for testing MEDS pipelines and generating sample datasets.",packages:[{name:"MEDS Testing Helpers",pypi_name:"meds_testing_helpers",github_repo:"Medical-Event-Data-Standard/meds_testing_helpers",docs_url:"https://meds-testing-helpers.readthedocs.io"}]}},dataset_etls:{name:"Dataset ETLs",description:"Publicly available ETL pipelines for converting EHR datasets into the MEDS format.",icon:"Storage",templates_and_tools:{name:"ETL Templates/Tools",description:"Template ETLs or tools to build your own custom ETLs.",packages:[{name:"ETL Template",github_repo:"Medical-Event-Data-Standard/ETL_MEDS_Template"},{name:"MEDS-ETL",github_repo:"Medical-Event-Data-Standard/meds_etl",warn:"_Use for the MIMIC dataset is deprecated_!"},{name:"MEDS Extract",pypi_name:"MEDS-extract",github_repo:"mmcdermott/MEDS_extract"}]},publicly_available_datasets:{name:"Public Datasets",description:"ETLs for datasets that are open for public use (subject to DUA and license agreements).",packages:[{name:"MIMIC-IV",demo_available:!0,pypi_name:"MIMIC-IV-MEDS",github_repo:"Medical-Event-Data-Standard/MIMIC_IV_MEDS"},{name:"AUMCdb",demo_available:!1,pypi_name:"AUMCdb_MEDS",github_repo:"prockenschaub/AUMCdb_MEDS"},{name:"NWICU",demo_available:!1,pypi_name:"NWICU_MEDS",github_repo:"rvandewater/NWICU_MEDS"},{name:"SICdb",demo_available:!1,pypi_name:"SICdb_MEDS",github_repo:"rvandewater/SICdb_MEDS"},{name:"INSPIRE",demo_available:!1,pypi_name:"INSPIRE_MEDS",github_repo:"rvandewater/INSPIRE_MEDS"}]},other_standards:{name:"Alternate Data Standards",description:"ETLs for converting from other EHR data standards (e.g., OMOP).",packages:[{name:"OMOP (via MEDS-ETL)",github_repo:"Medical-Event-Data-Standard/meds_etl"}]}},models:{name:"Published Models",description:"Publicly available, reproducible model training recipes you can use on your MEDS data.",icon:"ModelTraining",packages:[{name:"CEHR-BERT",paper_url:"https://proceedings.mlr.press/v158/pang21a.html",github_repo:"cumc-dbmi/cehrbert",pypi_name:"cehrbert",MEDS_DEV_name:"cehrbert"}]}},w={sidebar_position:3},x="MEDS Ecosystem",j={},T=[];function I(e){const a={h1:"h1",header:"header",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.header,{children:(0,n.jsx)(a.h1,{id:"meds-ecosystem",children:"MEDS Ecosystem"})}),"\n","\n",(0,n.jsx)(k,{data:y})]})}function A(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(I,{...e})}):I(e)}}}]);