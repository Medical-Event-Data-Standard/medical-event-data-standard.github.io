"use strict";(self.webpackChunktemp=self.webpackChunktemp||[]).push([[219],{92017:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>m,frontMatter:()=>s,metadata:()=>a,toc:()=>h});const a=JSON.parse('{"id":"tutorials/kdd2025/extracting_prediction_tasks","title":"Extracting a Prediction Task","description":"To easily extract prediction tasks from MEDS Data, we will use the","source":"@site/docs/tutorials/kdd2025/extracting_prediction_tasks.mdx","sourceDirName":"tutorials/kdd2025","slug":"/tutorials/kdd2025/extracting_prediction_tasks","permalink":"/docs/tutorials/kdd2025/extracting_prediction_tasks","draft":false,"unlisted":false,"editUrl":"https://github.com/Medical-Event-Data-Standard/medical-event-data-standard.github.io/tree/main/docs/docs/tutorials/kdd2025/extracting_prediction_tasks.mdx","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"mainSidebar","previous":{"title":"Converting to MEDS","permalink":"/docs/tutorials/kdd2025/converting_to_MEDS"},"next":{"title":"Build a (Tabular Baseline) Model over MEDS data","permalink":"/docs/tutorials/kdd2025/build_a_model_tabular"}}');var o=t(74848),r=t(28453),i=t(32971),d=t.n(i);const l=JSON.parse('{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"ed2b5e81d904494bb4b0ede55b713c32":{"model_module":"@jupyter-widgets/controls","model_name":"TextModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"TextModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"TextView","continuous_update":true,"description":"Search:","description_tooltip":null,"disabled":false,"layout":"IPY_MODEL_7fc9dab257ce4656ba0f2c08f0df58cb","placeholder":"Enter search term...","style":"IPY_MODEL_0101bbb7f2c54ac180cdfc472b8c5952","value":""}},"7fc9dab257ce4656ba0f2c08f0df58cb":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"0101bbb7f2c54ac180cdfc472b8c5952":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"0c5eda53f8f4414dafc819e3eb5ee11a":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","model_module_version":"1.0.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_model_name":"OutputModel","_view_count":null,"_view_module":"@jupyter-widgets/output","_view_module_version":"1.0.0","_view_name":"OutputView","layout":"IPY_MODEL_a92f315cd0c64fc587a837ac3bc70f07","msg_id":"","outputs":[{"output_type":"display_data","data":{"text/plain":"                          code  \\\\\\n0      DIAGNOSIS//ICD//9//1560   \\n1      DIAGNOSIS//ICD//9//0417   \\n2              LAB//50873//N/A   \\n3     DIAGNOSIS//ICD//9//V1551   \\n4       INFUSION_START//225860   \\n...                        ...   \\n2656  DIAGNOSIS//ICD//10//I724   \\n2657   DIAGNOSIS//ICD//9//5939   \\n2658   DIAGNOSIS//ICD//9//3940   \\n2659          LAB//51218//#/uL   \\n2660  PROCEDURE//START//224560   \\n\\n                                            description  \\\\\\n0                     Malignant neoplasm of gallbladder   \\n1     Pseudomonas infection in conditions classified...   \\n2                        Nuclear Ab [Presence] in Serum   \\n3                Personal history of traumatic fracture   \\n4      clindamycin Injection\\\\nclindamycin Oral Solution   \\n...                                                 ...   \\n2656              Aneurysm of artery of lower extremity   \\n2657          Unspecified disorder of kidney and ureter   \\n2658                                    Mitral stenosis   \\n2659                   Granulocytes [#/volume] in Blood   \\n2660  Pulmonary catheterization with Swan-Ganz catheter   \\n\\n                         parent_codes  \\n0                      [ICD9CM/156.0]  \\n1                      [ICD9CM/041.7]  \\n2                      [LOINC/8061-4]  \\n3                     [ICD9CM/V15.51]  \\n4     [RxNorm/1737230, RxNorm/562265]  \\n...                               ...  \\n2656                  [ICD10CM/I72.4]  \\n2657                   [ICD9CM/593.9]  \\n2658                   [ICD9CM/394.0]  \\n2659                  [LOINC/30394-1]  \\n2660                [SNOMED/65677008]  \\n\\n[2661 rows x 3 columns]","text/html":"\\n  <div id=\\"df-6dc0235b-5aa8-413f-814b-8c2ad8d787f5\\" class=\\"colab-df-container\\">\\n    <div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n</style>\\n<table border=\\"1\\" class=\\"dataframe\\">\\n  <thead>\\n    <tr style=\\"text-align: right;\\">\\n      <th></th>\\n      <th>code</th>\\n      <th>description</th>\\n      <th>parent_codes</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>0</th>\\n      <td>DIAGNOSIS//ICD//9//1560</td>\\n      <td>Malignant neoplasm of gallbladder</td>\\n      <td>[ICD9CM/156.0]</td>\\n    </tr>\\n    <tr>\\n      <th>1</th>\\n      <td>DIAGNOSIS//ICD//9//0417</td>\\n      <td>Pseudomonas infection in conditions classified...</td>\\n      <td>[ICD9CM/041.7]</td>\\n    </tr>\\n    <tr>\\n      <th>2</th>\\n      <td>LAB//50873//N/A</td>\\n      <td>Nuclear Ab [Presence] in Serum</td>\\n      <td>[LOINC/8061-4]</td>\\n    </tr>\\n    <tr>\\n      <th>3</th>\\n      <td>DIAGNOSIS//ICD//9//V1551</td>\\n      <td>Personal history of traumatic fracture</td>\\n      <td>[ICD9CM/V15.51]</td>\\n    </tr>\\n    <tr>\\n      <th>4</th>\\n      <td>INFUSION_START//225860</td>\\n      <td>clindamycin Injection\\\\nclindamycin Oral Solution</td>\\n      <td>[RxNorm/1737230, RxNorm/562265]</td>\\n    </tr>\\n    <tr>\\n      <th>...</th>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n    </tr>\\n    <tr>\\n      <th>2656</th>\\n      <td>DIAGNOSIS//ICD//10//I724</td>\\n      <td>Aneurysm of artery of lower extremity</td>\\n      <td>[ICD10CM/I72.4]</td>\\n    </tr>\\n    <tr>\\n      <th>2657</th>\\n      <td>DIAGNOSIS//ICD//9//5939</td>\\n      <td>Unspecified disorder of kidney and ureter</td>\\n      <td>[ICD9CM/593.9]</td>\\n    </tr>\\n    <tr>\\n      <th>2658</th>\\n      <td>DIAGNOSIS//ICD//9//3940</td>\\n      <td>Mitral stenosis</td>\\n      <td>[ICD9CM/394.0]</td>\\n    </tr>\\n    <tr>\\n      <th>2659</th>\\n      <td>LAB//51218//#/uL</td>\\n      <td>Granulocytes [#/volume] in Blood</td>\\n      <td>[LOINC/30394-1]</td>\\n    </tr>\\n    <tr>\\n      <th>2660</th>\\n      <td>PROCEDURE//START//224560</td>\\n      <td>Pulmonary catheterization with Swan-Ganz catheter</td>\\n      <td>[SNOMED/65677008]</td>\\n    </tr>\\n  </tbody>\\n</table>\\n<p>2661 rows \xd7 3 columns</p>\\n</div>\\n    <div class=\\"colab-df-buttons\\">\\n\\n  <div class=\\"colab-df-container\\">\\n    <button class=\\"colab-df-convert\\" onclick=\\"convertToInteractive(\'df-6dc0235b-5aa8-413f-814b-8c2ad8d787f5\')\\"\\n            title=\\"Convert this dataframe to an interactive table.\\"\\n            style=\\"display:none;\\">\\n\\n  <svg xmlns=\\"http://www.w3.org/2000/svg\\" height=\\"24px\\" viewBox=\\"0 -960 960 960\\">\\n    <path d=\\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\\"/>\\n  </svg>\\n    </button>\\n\\n  <style>\\n    .colab-df-container {\\n      display:flex;\\n      gap: 12px;\\n    }\\n\\n    .colab-df-convert {\\n      background-color: #E8F0FE;\\n      border: none;\\n      border-radius: 50%;\\n      cursor: pointer;\\n      display: none;\\n      fill: #1967D2;\\n      height: 32px;\\n      padding: 0 0 0 0;\\n      width: 32px;\\n    }\\n\\n    .colab-df-convert:hover {\\n      background-color: #E2EBFA;\\n      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\\n      fill: #174EA6;\\n    }\\n\\n    .colab-df-buttons div {\\n      margin-bottom: 4px;\\n    }\\n\\n    [theme=dark] .colab-df-convert {\\n      background-color: #3B4455;\\n      fill: #D2E3FC;\\n    }\\n\\n    [theme=dark] .colab-df-convert:hover {\\n      background-color: #434B5C;\\n      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\\n      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\\n      fill: #FFFFFF;\\n    }\\n  </style>\\n\\n    <script>\\n      const buttonEl =\\n        document.querySelector(\'#df-6dc0235b-5aa8-413f-814b-8c2ad8d787f5 button.colab-df-convert\');\\n      buttonEl.style.display =\\n        google.colab.kernel.accessAllowed ? \'block\' : \'none\';\\n\\n      async function convertToInteractive(key) {\\n        const element = document.querySelector(\'#df-6dc0235b-5aa8-413f-814b-8c2ad8d787f5\');\\n        const dataTable =\\n          await google.colab.kernel.invokeFunction(\'convertToInteractive\',\\n                                                    [key], {});\\n        if (!dataTable) return;\\n\\n        const docLinkHtml = \'Like what you see? Visit the \' +\\n          \'<a target=\\"_blank\\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>\'\\n          + \' to learn more about interactive tables.\';\\n        element.innerHTML = \'\';\\n        dataTable[\'output_type\'] = \'display_data\';\\n        await google.colab.output.renderOutput(dataTable, element);\\n        const docLink = document.createElement(\'div\');\\n        docLink.innerHTML = docLinkHtml;\\n        element.appendChild(docLink);\\n      }\\n    <\/script>\\n  </div>\\n\\n\\n    <div id=\\"df-c2875eb1-52fc-4de7-b499-bf749737968b\\">\\n      <button class=\\"colab-df-quickchart\\" onclick=\\"quickchart(\'df-c2875eb1-52fc-4de7-b499-bf749737968b\')\\"\\n                title=\\"Suggest charts\\"\\n                style=\\"display:none;\\">\\n\\n<svg xmlns=\\"http://www.w3.org/2000/svg\\" height=\\"24px\\"viewBox=\\"0 0 24 24\\"\\n     width=\\"24px\\">\\n    <g>\\n        <path d=\\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\\"/>\\n    </g>\\n</svg>\\n      </button>\\n\\n<style>\\n  .colab-df-quickchart {\\n      --bg-color: #E8F0FE;\\n      --fill-color: #1967D2;\\n      --hover-bg-color: #E2EBFA;\\n      --hover-fill-color: #174EA6;\\n      --disabled-fill-color: #AAA;\\n      --disabled-bg-color: #DDD;\\n  }\\n\\n  [theme=dark] .colab-df-quickchart {\\n      --bg-color: #3B4455;\\n      --fill-color: #D2E3FC;\\n      --hover-bg-color: #434B5C;\\n      --hover-fill-color: #FFFFFF;\\n      --disabled-bg-color: #3B4455;\\n      --disabled-fill-color: #666;\\n  }\\n\\n  .colab-df-quickchart {\\n    background-color: var(--bg-color);\\n    border: none;\\n    border-radius: 50%;\\n    cursor: pointer;\\n    display: none;\\n    fill: var(--fill-color);\\n    height: 32px;\\n    padding: 0;\\n    width: 32px;\\n  }\\n\\n  .colab-df-quickchart:hover {\\n    background-color: var(--hover-bg-color);\\n    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\\n    fill: var(--button-hover-fill-color);\\n  }\\n\\n  .colab-df-quickchart-complete:disabled,\\n  .colab-df-quickchart-complete:disabled:hover {\\n    background-color: var(--disabled-bg-color);\\n    fill: var(--disabled-fill-color);\\n    box-shadow: none;\\n  }\\n\\n  .colab-df-spinner {\\n    border: 2px solid var(--fill-color);\\n    border-color: transparent;\\n    border-bottom-color: var(--fill-color);\\n    animation:\\n      spin 1s steps(1) infinite;\\n  }\\n\\n  @keyframes spin {\\n    0% {\\n      border-color: transparent;\\n      border-bottom-color: var(--fill-color);\\n      border-left-color: var(--fill-color);\\n    }\\n    20% {\\n      border-color: transparent;\\n      border-left-color: var(--fill-color);\\n      border-top-color: var(--fill-color);\\n    }\\n    30% {\\n      border-color: transparent;\\n      border-left-color: var(--fill-color);\\n      border-top-color: var(--fill-color);\\n      border-right-color: var(--fill-color);\\n    }\\n    40% {\\n      border-color: transparent;\\n      border-right-color: var(--fill-color);\\n      border-top-color: var(--fill-color);\\n    }\\n    60% {\\n      border-color: transparent;\\n      border-right-color: var(--fill-color);\\n    }\\n    80% {\\n      border-color: transparent;\\n      border-right-color: var(--fill-color);\\n      border-bottom-color: var(--fill-color);\\n    }\\n    90% {\\n      border-color: transparent;\\n      border-bottom-color: var(--fill-color);\\n    }\\n  }\\n</style>\\n\\n      <script>\\n        async function quickchart(key) {\\n          const quickchartButtonEl =\\n            document.querySelector(\'#\' + key + \' button\');\\n          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\\n          quickchartButtonEl.classList.add(\'colab-df-spinner\');\\n          try {\\n            const charts = await google.colab.kernel.invokeFunction(\\n                \'suggestCharts\', [key], {});\\n          } catch (error) {\\n            console.error(\'Error during call to suggestCharts:\', error);\\n          }\\n          quickchartButtonEl.classList.remove(\'colab-df-spinner\');\\n          quickchartButtonEl.classList.add(\'colab-df-quickchart-complete\');\\n        }\\n        (() => {\\n          let quickchartButtonEl =\\n            document.querySelector(\'#df-c2875eb1-52fc-4de7-b499-bf749737968b button\');\\n          quickchartButtonEl.style.display =\\n            google.colab.kernel.accessAllowed ? \'block\' : \'none\';\\n        })();\\n      <\/script>\\n    </div>\\n\\n  <div id=\\"id_69a68dee-22af-4038-8458-226eaeeec0be\\">\\n    <style>\\n      .colab-df-generate {\\n        background-color: #E8F0FE;\\n        border: none;\\n        border-radius: 50%;\\n        cursor: pointer;\\n        display: none;\\n        fill: #1967D2;\\n        height: 32px;\\n        padding: 0 0 0 0;\\n        width: 32px;\\n      }\\n\\n      .colab-df-generate:hover {\\n        background-color: #E2EBFA;\\n        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\\n        fill: #174EA6;\\n      }\\n\\n      [theme=dark] .colab-df-generate {\\n        background-color: #3B4455;\\n        fill: #D2E3FC;\\n      }\\n\\n      [theme=dark] .colab-df-generate:hover {\\n        background-color: #434B5C;\\n        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\\n        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\\n        fill: #FFFFFF;\\n      }\\n    </style>\\n    <button class=\\"colab-df-generate\\" onclick=\\"generateWithVariable(\'metadata_df\')\\"\\n            title=\\"Generate code using this dataframe.\\"\\n            style=\\"display:none;\\">\\n\\n  <svg xmlns=\\"http://www.w3.org/2000/svg\\" height=\\"24px\\"viewBox=\\"0 0 24 24\\"\\n       width=\\"24px\\">\\n    <path d=\\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\\"/>\\n  </svg>\\n    </button>\\n    <script>\\n      (() => {\\n      const buttonEl =\\n        document.querySelector(\'#id_69a68dee-22af-4038-8458-226eaeeec0be button.colab-df-generate\');\\n      buttonEl.style.display =\\n        google.colab.kernel.accessAllowed ? \'block\' : \'none\';\\n\\n      buttonEl.onclick = () => {\\n        google.colab.notebook.generateWithVariable(\'metadata_df\');\\n      }\\n      })();\\n    <\/script>\\n  </div>\\n\\n    </div>\\n  </div>\\n","application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"metadata_df","summary":"{\\n  \\"name\\": \\"metadata_df\\",\\n  \\"rows\\": 2661,\\n  \\"fields\\": [\\n    {\\n      \\"column\\": \\"code\\",\\n      \\"properties\\": {\\n        \\"dtype\\": \\"string\\",\\n        \\"num_unique_values\\": 2661,\\n        \\"samples\\": [\\n          \\"DIAGNOSIS//ICD//9//99674\\",\\n          \\"DIAGNOSIS//ICD//9//E9331\\",\\n          \\"LAB//51749//UNK\\"\\n        ],\\n        \\"semantic_type\\": \\"\\",\\n        \\"description\\": \\"\\"\\n      }\\n    },\\n    {\\n      \\"column\\": \\"description\\",\\n      \\"properties\\": {\\n        \\"dtype\\": \\"string\\",\\n        \\"num_unique_values\\": 2347,\\n        \\"samples\\": [\\n          \\"Single internal mammary-coronary artery bypass\\",\\n          \\"Overflow incontinence\\",\\n          \\"Late effect of certain complications of trauma\\"\\n        ],\\n        \\"semantic_type\\": \\"\\",\\n        \\"description\\": \\"\\"\\n      }\\n    },\\n    {\\n      \\"column\\": \\"parent_codes\\",\\n      \\"properties\\": {\\n        \\"dtype\\": \\"object\\",\\n        \\"semantic_type\\": \\"\\",\\n        \\"description\\": \\"\\"\\n      }\\n    }\\n  ]\\n}"}},"metadata":{}}]}},"a92f315cd0c64fc587a837ac3bc70f07":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"98e4d8dcb49647d187f24acc6601d005":{"model_module":"@jupyter-widgets/controls","model_name":"TextModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"TextModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"TextView","continuous_update":true,"description":"Search:","description_tooltip":null,"disabled":false,"layout":"IPY_MODEL_d04c91b4a9ab4c64a40c8f0524f88562","placeholder":"Enter search term...","style":"IPY_MODEL_f223cdf2139444909d40c4ef23a55aba","value":""}},"d04c91b4a9ab4c64a40c8f0524f88562":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f223cdf2139444909d40c4ef23a55aba":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"5563afbdb4fd4a518d65b539878e7056":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","model_module_version":"1.0.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_model_name":"OutputModel","_view_count":null,"_view_module":"@jupyter-widgets/output","_view_module_version":"1.0.0","_view_name":"OutputView","layout":"IPY_MODEL_fe28b13d974e46d2ac54e82034f40430","msg_id":"","outputs":[{"output_type":"display_data","data":{"text/plain":"                                                     code text_value\\n0                                               GENDER//F       None\\n1                                              MEDS_BIRTH       None\\n2                                         LAB//51087//UNK       None\\n3                                         LAB//50940//UNK       None\\n4                                         LAB//51079//UNK        NEG\\n...                                                   ...        ...\\n803943                           DIAGNOSIS//ICD//10//B952       None\\n803948  DRG//APR//711//POST-OP, POST-TRAUMA, OTHER DEV...       None\\n803949  DRG//HCFA//856//POSTOPERATIVE OR POST-TRAUMATI...       None\\n803969                       MEDICATION//STOP//Daptomycin       None\\n803972             MEDICATION//STOP//Collagenase Ointment       None\\n\\n[10655 rows x 2 columns]","text/html":"\\n  <div id=\\"df-75e9ca32-9529-4649-bba1-ca8f824ca940\\" class=\\"colab-df-container\\">\\n    <div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n</style>\\n<table border=\\"1\\" class=\\"dataframe\\">\\n  <thead>\\n    <tr style=\\"text-align: right;\\">\\n      <th></th>\\n      <th>code</th>\\n      <th>text_value</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>0</th>\\n      <td>GENDER//F</td>\\n      <td>None</td>\\n    </tr>\\n    <tr>\\n      <th>1</th>\\n      <td>MEDS_BIRTH</td>\\n      <td>None</td>\\n    </tr>\\n    <tr>\\n      <th>2</th>\\n      <td>LAB//51087//UNK</td>\\n      <td>None</td>\\n    </tr>\\n    <tr>\\n      <th>3</th>\\n      <td>LAB//50940//UNK</td>\\n      <td>None</td>\\n    </tr>\\n    <tr>\\n      <th>4</th>\\n      <td>LAB//51079//UNK</td>\\n      <td>NEG</td>\\n    </tr>\\n    <tr>\\n      <th>...</th>\\n      <td>...</td>\\n      <td>...</td>\\n    </tr>\\n    <tr>\\n      <th>803943</th>\\n      <td>DIAGNOSIS//ICD//10//B952</td>\\n      <td>None</td>\\n    </tr>\\n    <tr>\\n      <th>803948</th>\\n      <td>DRG//APR//711//POST-OP, POST-TRAUMA, OTHER DEV...</td>\\n      <td>None</td>\\n    </tr>\\n    <tr>\\n      <th>803949</th>\\n      <td>DRG//HCFA//856//POSTOPERATIVE OR POST-TRAUMATI...</td>\\n      <td>None</td>\\n    </tr>\\n    <tr>\\n      <th>803969</th>\\n      <td>MEDICATION//STOP//Daptomycin</td>\\n      <td>None</td>\\n    </tr>\\n    <tr>\\n      <th>803972</th>\\n      <td>MEDICATION//STOP//Collagenase Ointment</td>\\n      <td>None</td>\\n    </tr>\\n  </tbody>\\n</table>\\n<p>10655 rows \xd7 2 columns</p>\\n</div>\\n    <div class=\\"colab-df-buttons\\">\\n\\n  <div class=\\"colab-df-container\\">\\n    <button class=\\"colab-df-convert\\" onclick=\\"convertToInteractive(\'df-75e9ca32-9529-4649-bba1-ca8f824ca940\')\\"\\n            title=\\"Convert this dataframe to an interactive table.\\"\\n            style=\\"display:none;\\">\\n\\n  <svg xmlns=\\"http://www.w3.org/2000/svg\\" height=\\"24px\\" viewBox=\\"0 -960 960 960\\">\\n    <path d=\\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\\"/>\\n  </svg>\\n    </button>\\n\\n  <style>\\n    .colab-df-container {\\n      display:flex;\\n      gap: 12px;\\n    }\\n\\n    .colab-df-convert {\\n      background-color: #E8F0FE;\\n      border: none;\\n      border-radius: 50%;\\n      cursor: pointer;\\n      display: none;\\n      fill: #1967D2;\\n      height: 32px;\\n      padding: 0 0 0 0;\\n      width: 32px;\\n    }\\n\\n    .colab-df-convert:hover {\\n      background-color: #E2EBFA;\\n      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\\n      fill: #174EA6;\\n    }\\n\\n    .colab-df-buttons div {\\n      margin-bottom: 4px;\\n    }\\n\\n    [theme=dark] .colab-df-convert {\\n      background-color: #3B4455;\\n      fill: #D2E3FC;\\n    }\\n\\n    [theme=dark] .colab-df-convert:hover {\\n      background-color: #434B5C;\\n      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\\n      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\\n      fill: #FFFFFF;\\n    }\\n  </style>\\n\\n    <script>\\n      const buttonEl =\\n        document.querySelector(\'#df-75e9ca32-9529-4649-bba1-ca8f824ca940 button.colab-df-convert\');\\n      buttonEl.style.display =\\n        google.colab.kernel.accessAllowed ? \'block\' : \'none\';\\n\\n      async function convertToInteractive(key) {\\n        const element = document.querySelector(\'#df-75e9ca32-9529-4649-bba1-ca8f824ca940\');\\n        const dataTable =\\n          await google.colab.kernel.invokeFunction(\'convertToInteractive\',\\n                                                    [key], {});\\n        if (!dataTable) return;\\n\\n        const docLinkHtml = \'Like what you see? Visit the \' +\\n          \'<a target=\\"_blank\\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>\'\\n          + \' to learn more about interactive tables.\';\\n        element.innerHTML = \'\';\\n        dataTable[\'output_type\'] = \'display_data\';\\n        await google.colab.output.renderOutput(dataTable, element);\\n        const docLink = document.createElement(\'div\');\\n        docLink.innerHTML = docLinkHtml;\\n        element.appendChild(docLink);\\n      }\\n    <\/script>\\n  </div>\\n\\n\\n    <div id=\\"df-350d92df-033c-48ca-822f-b0d076bff610\\">\\n      <button class=\\"colab-df-quickchart\\" onclick=\\"quickchart(\'df-350d92df-033c-48ca-822f-b0d076bff610\')\\"\\n                title=\\"Suggest charts\\"\\n                style=\\"display:none;\\">\\n\\n<svg xmlns=\\"http://www.w3.org/2000/svg\\" height=\\"24px\\"viewBox=\\"0 0 24 24\\"\\n     width=\\"24px\\">\\n    <g>\\n        <path d=\\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\\"/>\\n    </g>\\n</svg>\\n      </button>\\n\\n<style>\\n  .colab-df-quickchart {\\n      --bg-color: #E8F0FE;\\n      --fill-color: #1967D2;\\n      --hover-bg-color: #E2EBFA;\\n      --hover-fill-color: #174EA6;\\n      --disabled-fill-color: #AAA;\\n      --disabled-bg-color: #DDD;\\n  }\\n\\n  [theme=dark] .colab-df-quickchart {\\n      --bg-color: #3B4455;\\n      --fill-color: #D2E3FC;\\n      --hover-bg-color: #434B5C;\\n      --hover-fill-color: #FFFFFF;\\n      --disabled-bg-color: #3B4455;\\n      --disabled-fill-color: #666;\\n  }\\n\\n  .colab-df-quickchart {\\n    background-color: var(--bg-color);\\n    border: none;\\n    border-radius: 50%;\\n    cursor: pointer;\\n    display: none;\\n    fill: var(--fill-color);\\n    height: 32px;\\n    padding: 0;\\n    width: 32px;\\n  }\\n\\n  .colab-df-quickchart:hover {\\n    background-color: var(--hover-bg-color);\\n    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\\n    fill: var(--button-hover-fill-color);\\n  }\\n\\n  .colab-df-quickchart-complete:disabled,\\n  .colab-df-quickchart-complete:disabled:hover {\\n    background-color: var(--disabled-bg-color);\\n    fill: var(--disabled-fill-color);\\n    box-shadow: none;\\n  }\\n\\n  .colab-df-spinner {\\n    border: 2px solid var(--fill-color);\\n    border-color: transparent;\\n    border-bottom-color: var(--fill-color);\\n    animation:\\n      spin 1s steps(1) infinite;\\n  }\\n\\n  @keyframes spin {\\n    0% {\\n      border-color: transparent;\\n      border-bottom-color: var(--fill-color);\\n      border-left-color: var(--fill-color);\\n    }\\n    20% {\\n      border-color: transparent;\\n      border-left-color: var(--fill-color);\\n      border-top-color: var(--fill-color);\\n    }\\n    30% {\\n      border-color: transparent;\\n      border-left-color: var(--fill-color);\\n      border-top-color: var(--fill-color);\\n      border-right-color: var(--fill-color);\\n    }\\n    40% {\\n      border-color: transparent;\\n      border-right-color: var(--fill-color);\\n      border-top-color: var(--fill-color);\\n    }\\n    60% {\\n      border-color: transparent;\\n      border-right-color: var(--fill-color);\\n    }\\n    80% {\\n      border-color: transparent;\\n      border-right-color: var(--fill-color);\\n      border-bottom-color: var(--fill-color);\\n    }\\n    90% {\\n      border-color: transparent;\\n      border-bottom-color: var(--fill-color);\\n    }\\n  }\\n</style>\\n\\n      <script>\\n        async function quickchart(key) {\\n          const quickchartButtonEl =\\n            document.querySelector(\'#\' + key + \' button\');\\n          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\\n          quickchartButtonEl.classList.add(\'colab-df-spinner\');\\n          try {\\n            const charts = await google.colab.kernel.invokeFunction(\\n                \'suggestCharts\', [key], {});\\n          } catch (error) {\\n            console.error(\'Error during call to suggestCharts:\', error);\\n          }\\n          quickchartButtonEl.classList.remove(\'colab-df-spinner\');\\n          quickchartButtonEl.classList.add(\'colab-df-quickchart-complete\');\\n        }\\n        (() => {\\n          let quickchartButtonEl =\\n            document.querySelector(\'#df-350d92df-033c-48ca-822f-b0d076bff610 button\');\\n          quickchartButtonEl.style.display =\\n            google.colab.kernel.accessAllowed ? \'block\' : \'none\';\\n        })();\\n      <\/script>\\n    </div>\\n\\n  <div id=\\"id_20e97308-119d-480d-991c-e99c69701655\\">\\n    <style>\\n      .colab-df-generate {\\n        background-color: #E8F0FE;\\n        border: none;\\n        border-radius: 50%;\\n        cursor: pointer;\\n        display: none;\\n        fill: #1967D2;\\n        height: 32px;\\n        padding: 0 0 0 0;\\n        width: 32px;\\n      }\\n\\n      .colab-df-generate:hover {\\n        background-color: #E2EBFA;\\n        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\\n        fill: #174EA6;\\n      }\\n\\n      [theme=dark] .colab-df-generate {\\n        background-color: #3B4455;\\n        fill: #D2E3FC;\\n      }\\n\\n      [theme=dark] .colab-df-generate:hover {\\n        background-color: #434B5C;\\n        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\\n        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\\n        fill: #FFFFFF;\\n      }\\n    </style>\\n    <button class=\\"colab-df-generate\\" onclick=\\"generateWithVariable(\'data_df\')\\"\\n            title=\\"Generate code using this dataframe.\\"\\n            style=\\"display:none;\\">\\n\\n  <svg xmlns=\\"http://www.w3.org/2000/svg\\" height=\\"24px\\"viewBox=\\"0 0 24 24\\"\\n       width=\\"24px\\">\\n    <path d=\\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\\"/>\\n  </svg>\\n    </button>\\n    <script>\\n      (() => {\\n      const buttonEl =\\n        document.querySelector(\'#id_20e97308-119d-480d-991c-e99c69701655 button.colab-df-generate\');\\n      buttonEl.style.display =\\n        google.colab.kernel.accessAllowed ? \'block\' : \'none\';\\n\\n      buttonEl.onclick = () => {\\n        google.colab.notebook.generateWithVariable(\'data_df\');\\n      }\\n      })();\\n    <\/script>\\n  </div>\\n\\n    </div>\\n  </div>\\n","application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data_df","summary":"{\\n  \\"name\\": \\"data_df\\",\\n  \\"rows\\": 10655,\\n  \\"fields\\": [\\n    {\\n      \\"column\\": \\"code\\",\\n      \\"properties\\": {\\n        \\"dtype\\": \\"string\\",\\n        \\"num_unique_values\\": 6619,\\n        \\"samples\\": [\\n          \\"MEDICATION//Potassium Chloride//Administered\\",\\n          \\"DIAGNOSIS//ICD//10//N12\\",\\n          \\"MEDICATION//LamoTRIgine//Not Given\\"\\n        ],\\n        \\"semantic_type\\": \\"\\",\\n        \\"description\\": \\"\\"\\n      }\\n    },\\n    {\\n      \\"column\\": \\"text_value\\",\\n      \\"properties\\": {\\n        \\"dtype\\": \\"category\\",\\n        \\"num_unique_values\\": 3166,\\n        \\"samples\\": [\\n          \\"RARE\\",\\n          \\"Lower leg - Left\\",\\n          \\"Slight Limitations\\"\\n        ],\\n        \\"semantic_type\\": \\"\\",\\n        \\"description\\": \\"\\"\\n      }\\n    }\\n  ]\\n}"}},"metadata":{}}]}},"fe28b13d974e46d2ac54e82034f40430":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}}}}},"cells":[{"cell_type":"markdown","source":["# Extracting a Prediction Task\\n","\\n","Now that we know how to convert a dataset into MEDS, lets do something useful with it! For this section of the tutorial, we\'ll demonstrate how to extract a set of labels of a prediction task for a health AI model.\\n","\\n","What\'s the first step in extracting this prediction task cohort? Figuring out what we actually want our task to be!\\n","\\n","We said at the start of this tutorial that our goal was to:\\n","\\n","  > _Identify patients who will have a long length of stay in the ICU_\\n","\\n","Simple, right? Well, not quite. This goal is clinically motivated, but vague from a computational and modeling standpoint. For whom exactly? How long is \\"long\\"? When should the prediction be made?\\n","\\n","To determine how to answer these questions and operationalize this task definition, one must work with clinical and local dataset experts to understand whether or not a given patient should be included in our cohort and even what their label should be.\\n","\\n","For this tutorial, we\'ll simulate a dialogue between yourself (acting as the role of the implementing AI developer) and a clinical and local dataset domain expert. The purpose of this simulated dialogue is to show (1) what the right kinds of questions to ask are when refining your task definition and (2) how to translate answers to those questions into operationalized criteria on a task of interest. To make this clear, after each question and answer exchange, we\'ll curate our evolving \\"formal definition\\" of the task in a semi-structured format to help us be clear in our thoughts. Much like our \\"conceptual spec\\" turned out to be very similar to the actually MEDS Extract specification file, we\'ll see that our conceptual model here will help us define our true final task definition file, which will use the [ACES](https://eventstreamaces.readthedocs.io) language to make task extraction deterministic and reproducible.\\n","\\n","_**Note 1**: This is just a simulated dialogue, and is not intended to be an accurate reflection of how you really would or should work with clinical collaborators or what their opinions or answers might be. No clinical experts were consulted in making this tutorial, as we were constrained in what tasks can be used that permit meaningful prediction over the demo dataset in use._\\n","\\n","_**Note 2**: You do not need to understand the clinical context of this example to follow along -- just how to translate what the domain expert requests into a concrete task specification._"],"metadata":{"id":"DinaK8tvpsRH"}},{"cell_type":"markdown","source":["## Question 1: Why predict this task?\\n","The first thing to understand when defining a prediction task is _why_ do we care about that task. This question is easy to answer superficially, but is suprisingly hard to answer in a more concrete way. A good way to ensure you\'re being sufficiently concrete in your answer is to reframe your question under a more quantitative, rather than qualitative framework, such as the [_Value of Information_](https://en.wikipedia.org/wiki/Value_of_information) framing. Under this framing, instead of asking \\"_why do we care about this task?_\\", we ask \\"_What would the quantitative benefit be to being able to predict this task perfectly?_\\" -- and, ideally, \\"_How would that benefit be realized?_\\". A similar approach is to leverage the [prediction-action dyad](https://pmc.ncbi.nlm.nih.gov/articles/PMC6857505/#ocz088-T1) approach, asking about what actions a prediction will enable or prompt and the benefits those actions will offer.\\n","\\n","Done properly, understanding why we care about a task will help reveal:\\n","  1. When would a prediction for this task be useful?\\n","  2. For what patients would predicting this task be useful?\\n","  3. What metrics do we care about in this prediction? What is our best proxy for eventual utility?\\n","  4. What trade-offs are we navigating in making this prediction? E.g., what are our constraints in trying to predict this outcome?\\n","\\n","So, let\'s explore this question in our hypothetical scenario!\\n","\\n","------------------------------------------------------------------------------\\n","\\n","**Q (You):** What\'s the goal here? What would you do differently if you knew a patient would have a long ICU stay?\\n","\\n","**A (Domain Expert):** There are a lot of things that prediction could be used for. It could be used to help us optimize patient flow, for example, by allowing us to know in advance when ICU beds would be available or not. For this case, though, I\'m most interested in what a prolonged length of stay (LOS) means about the patient\'s acuity. The idea here is that patients with prolonged ICU stays often experience worse outcomes\u2014more complications, hospital-acquired infections, and higher mortality risk. If we can predict early on which patients are likely to have extended ICU stays, we could proactively intervene to prevent complications. Specifically, we\'re thinking about applying interventions like early mobilization, targeted nutritional support, or additional clinical monitoring resources."],"metadata":{"id":"TY--7Bcu8Ad7"}},{"cell_type":"markdown","source":["### Question 1.A: When are we predicting this?\\n","\\n","**Q (You)**: Ok, given that goal, when would understanding that these interventions might be needed be most useful?\\n","\\n","**A (Domain Expert)**: Obviously the earlier the better, but critically for some of these interventions, what really matters is beginning them sufficiently early in the course to improve long term outcomes. So, we\'d want to predict these as far in advance as we can.\\n","\\n","**Q (You)**: Do we need to predict that the stay will remain ongoing for a long time continuously throughout the stay? E.g., are we predicting that the remaining time in the ICU will be long? Or is this a one-time prediction?\\n","\\n","**A (Domain Expert)**: Often it will become clear pretty quickly whether a patient is going to be in this state or not -- but the issue is that we want to know and be able to plan for these interventions even earlier than that. So, rather than predicting that the remaining time will be long, the biggest impact would be if we could predict earlier that the patient will remain in the ICU for a long time. Maybe if we could use their first day in the ICU as an input before making our prediction that their stay would be long, that\'d be a good balance?\\n","\\n","------------------------------------------------------------------------------\\n","\\n","With this, we have our first piece of operationalization of our task: we want to make the prediction using data up to and including the first 24 hours of their ICU stay. Let\'s record that for now:\\n","\\n","```yaml\\n","input: ICU admission + 24h\\n","```\\n","\\n","Note that this actually implies something about our patient population: Let\'s clarify further.\\n","\\n","------------------------------------------------------------------------------\\n","\\n","**Q (You)**: Ok, sounds great, but what about patients who are in the ICU for less than 24 hours?\\n","\\n","**A (Domain Expert)**: We should omit those patients. If we\'re trying to plan for interventions, we don\'t need to plan around those patients who are already discharged.\\n","\\n","------------------------------------------------------------------------------\\n","\\n","So, this has revealed our first constraint in defining our task. Namely, the patient\'s ICU stay can\'t end within the first 24 hours. To represent that in our \\"conceptual specification\\", we\'ll add a note that there can\'t be an \\"ICU discharge\\" event in the input window:\\n","\\n","```yaml\\n","input:\\n","  start: ICU admission\\n","  end: ICU admission + 24h\\n","  has: no ICU discharge\\n","```\\n"],"metadata":{"id":"IDOfPQ8j-miR"}},{"cell_type":"markdown","source":["### Question 1.B: For which patients would this task actually help?\\n","Our last exchange indicated that we want to exclude some patients from our cohort, because predicting this task label on those patients would not be meaningful. Are there more patients like this?\\n","\\n","------------------------------------------------------------------------------\\n","\\n","**Q (You)**: Are there other patients for whom we wouldn\'t use this predictor, beyond those who aren\'t in the ICU for long enough?\\n","\\n","**A (Domain Expert)**: Great question. Some patients come in and are already so ill that the care team knows what to expect in advance. The most obvious example of these are patients who actually have do not recussitate (DNR) or comfort measures only (CMO) orders on record, or add them in their first day -- these patients are under palliative care, and so we already know what kinds of interventions are most suited and may be needed in that setting. We should probably exclude them too.\\n","\\n","------------------------------------------------------------------------------\\n","\\n","We can add this to our specification too:\\n","\\n","```yaml\\n","input:\\n","  start: ICU admission\\n","  end: ICU admission + 24h\\n","  has:\\n","    ICU discharge: None\\n","    CMO: None\\n","    DNR: None\\n","```\\n","\\n","**Note** In a real task, we might have many more exclusion or inclusion criteria than just this.\\n","\\n"],"metadata":{"id":"yJS2PtdMBOC7"}},{"cell_type":"markdown","source":["### Question 1.C: What does \\"long LOS\\" actually mean?\\n","\\n","**Q (You)**: What threshold defines a \\"long\\" ICU stay?\\n","\\n","**A (Domain Expert)**: Generally speaking, if a patient is in the ICU for more than a few days, something is wrong. We can use three days as a threshold for our purposes here.\\n","\\n","------------------------------------------------------------------------------\\n","\\n","This lets us define not just our input window, but also the window that defines our prediction target.\\n","\\n","```yaml\\n","input:\\n","  start: ICU admission\\n","  end: ICU admission + 24h\\n","  has:\\n","    ICU discharge: None\\n","    CMO: None\\n","    DNR: None\\n","target:\\n","  start: ICU admission\\n","  end: ICU discharge\\n","  label: Longer than 3 days?\\n","```"],"metadata":{"id":"sRhuEqe5CelS"}},{"cell_type":"markdown","source":["## Question 2: Accounting for Edge Cases and Messy Data\\n","\\n","So far, our questions have been very focused on an \\"idealized\\" view of the task and the dataset. But, in reality, there are a lot of complications we need to consider in clinical predictions; things like censoring, data leakage, incomplete labels, and more. We can explore some of these too to refine our task definition."],"metadata":{"id":"5GSdSnYRDHoa"}},{"cell_type":"markdown","source":["### Question 2.A: Future Leakage and Gap Windows\\n","\\n","**Q (You)**: How reliable is our data? Is it ever possible that a patient would be recorded as being discharged from the ICU at a certain time, but in reality the clinical team would all know they were getting discharged or the patient might have actually been discharged earlier, for example?\\n","\\n","**A (Domain Expert)**: Oh, that\'s definitely possible. There could be a deviation of up to a few hours where that might be known.\\n","\\n","------------------------------------------------------------------------------\\n","\\n","This sort of error (the possibility of future leakage) suggests we should consider adding a _gap window_ to our task. This is a window that extends some of our constraints out beyond the end of our input time to avoid having very easy patients in our training set who are only so easy because in reality the care team already knows the answer. We\'ll add one for 6 hours here:\\n","\\n","```yaml\\n","input:\\n","  start: ICU admission\\n","  end: ICU admission + 24h\\n","  has:\\n","    ICU discharge: None\\n","    CMO: None\\n","    DNR: None\\n","target:\\n","  start: ICU admission\\n","  end: ICU discharge\\n","  label: Longer than 3 days?\\n","gap:\\n","  start: input.end\\n","  end: input.end + 6h\\n","  has:\\n","    ICU discharge: None\\n","    CMO: None\\n","    DNR: None\\n","```"],"metadata":{"id":"--0EuQtmGqrz"}},{"cell_type":"markdown","source":["### Question 2.B: Conditional Predictions\\n","\\n","**Q (You)**: What about patients who don\'t stay a long time in the ICU becuase they die? Or what about patients who leave the ICU quickly, but then die shortly thereafter. In both cases, these patients clearly had severe illness, but our current task would count them as negative samples. What do we want to do about that?\\n","\\n","**A (Domain Expert)**: Oh, that\'s a big issue. We should really predict that separately -- if a patient is at severe risk of mortality, then we\'d take a potentially different set of actions than we would if we thought they were going to stay in the ICU for a long time, but survive.\\n","\\n","**Q (You)**: So for this task, is it acceptable to think of it as prediction of prolonged length of stay conditioned on the patient not dying?\\n","\\n","**A (Domain Expert)**: Yes, that\'s what we\'re going for here.\\n","\\n","------------------------------------------------------------------------------\\n","\\n","```yaml\\n","input:\\n","  start: ICU admission\\n","  end: ICU admission + 24h\\n","  has:\\n","    ICU discharge: None\\n","    CMO: None\\n","    DNR: None\\n","target:\\n","  start: ICU admission\\n","  end: ICU discharge\\n","  label: Longer than 3 days?\\n","  has:\\n","    death: None\\n","gap:\\n","  start: input.end\\n","  end: input.end + 6h\\n","  has:\\n","    ICU discharge: None\\n","    CMO: None\\n","    DNR: None\\n","```"],"metadata":{"id":"oDdeUfa8GuWg"}},{"cell_type":"markdown","source":["## Other questions\\n","We\'re going to stop here for this task, but there are many more questions and refinements you could make! You could ask about:\\n","  1. How should we handle censored patients (patients whose data ends before the end of our period of interest)?\\n","  2. What about patients who have very little data recorded?\\n","  3. Are there properties that we should want patients to have in order to be considered for this task at all?"],"metadata":{"id":"6JuK_-7FHcJA"}},{"cell_type":"markdown","source":["## Operationalizing our \\"conceptual task description\\": The ACES Language"],"metadata":{"id":"YztYYno7HzcW"}},{"cell_type":"markdown","source":["So far, we\'ve put together this description of our task:\\n","\\n","```yaml\\n","input:\\n","  start: ICU admission\\n","  end: ICU admission + 24h\\n","  has:\\n","    ICU discharge: None\\n","    CMO: None\\n","    DNR: None\\n","target:\\n","  start: ICU admission\\n","  end: ICU discharge\\n","  label: Longer than 3 days?\\n","  has:\\n","    death: None\\n","gap:\\n","  start: input.end\\n","  end: input.end + 6h\\n","  has:\\n","    ICU discharge: None\\n","    CMO: None\\n","    DNR: None\\n","```\\n","\\n","How can we turn this into something that is precise and operationalizable? The key idea we\'ll use here is formalizing some of the notions of the \\"building blocks\\" of this conceptual specification. As we do so, what we\'ll really be doing is building up the formal [ACES task configuration language](https://eventstreamaces.readthedocs.io/en/latest/readme.html#task-configuration-file) -- so if you want to peek ahead, check out the documentation!"],"metadata":{"id":"DQIrrKRqJXuP"}},{"cell_type":"markdown","source":["### Building Block 1: Windows"],"metadata":{"id":"N1QgBAFEJsTR"}},{"cell_type":"markdown","source":["The first and most important such building block is that of the windows we\'ve specified. Here, we have an `input` window, a `target` window, and a `gap` window -- but the names of the windows themselves aren\'t important. Really, what\'s important here is we\'re using these to indicate specific relative parts of a patient\'s timeline -- parts that are dependent on one another and could possibly be realized multiple times over a patient record. Here, these windows are connected in that we have:\\n","\\n","  * A \\"root\\" or \\"trigger\\" event of an ICU admission.\\n","  * Our `input` window spanning from that trigger event until 24 hours later.\\n","  * Our `gap` window spanning from the end of that `input` window until 6 hours later.\\n","  * Our `target` window spanning from that trigger event until _the next \\"ICU discharge\\" event.\\n","\\n","Let\'s re-write this specification to make these connections between windows more apparent.\\n","\\n","```yaml\\n","trigger: ICU admission\\n","\\n","windows:\\n","  input:\\n","    start: trigger\\n","    end: start + 24h\\n","    has:\\n","      ICU discharge: None\\n","      CMO: None\\n","      DNR: None\\n","  target:\\n","    start: trigger\\n","    end: start -> ICU discharge\\n","    label: Longer than 3 days?\\n","    has:\\n","      death: None\\n","  gap:\\n","    start: input.end\\n","    end: start + 6h\\n","    has:\\n","      ICU discharge: None\\n","      CMO: None\\n","      DNR: None\\n","```"],"metadata":{"id":"JknhIbqXJsH3"}},{"cell_type":"markdown","source":["### Building Block 2: Predicates"],"metadata":{"id":"nzKnaA6BJwqe"}},{"cell_type":"markdown","source":["The next building block of our language we\'ll highlight is that of the key concepts or \\"predicates\\" we rely on in order to define both our relative windows and their constraints. Namely, here, we need to know how to identify within our given dataset all of the following:\\n","  * An `ICU admission`\\n","  * An `ICU discharge`\\n","  * A `death`\\n","  * A `CMO` event\\n","  * A `DNR` event\\n","\\n","If we don\'t know how to recognize those events within our data, our nice description of our windows isn\'t helpful! This is where we need that \\"local data expertise\\" we described above -- understanding how we can recognize these key events within our dataset.\\n","\\n","_**Note**: If your input data source were from a harmonized standard, such as [OHDSI OMOP](https://www.ohdsi.org/data-standardization/), you could also use those standard vocabularies and existing tools; unfortunately, however, not all datasets are harmonized at the start._\\n","\\n","**What if you didn\'t have a collaborator with local data expertise?** Then there\'s a reasonable question to be asked about why are you working with that dataset! But, in the event that you are, you can always inspect the MEDS dataset directly across three easy to use axes to see if you can figure out which codes are reasonable starting points:\\n","  1. The code strings themselves may be human readable (e.g., in MEDS, death events often use codes that begin with `MEDS_DEATH`).\\n","  2. The `text_value` field may indicate the events of interest (see below for an example).\\n","  3. The `metadata/codes.parquet` file may contain free-text descriptions for the codes or links to external ontologies that can be used.\\n","\\n","To use these strategies here, let\'s pull in our dataset from the tutorial resources, then we can dive in!"],"metadata":{"id":"i0zZBNpkJ0eU"}},{"cell_type":"code","source":["%%bash\\n","set -e\\n","\\n","wget -q -c https://github.com/Medical-Event-Data-Standard/MEDS_KDD_2025_Tutorial/raw/refs/heads/main/MEDS_data.zip\\n","unzip -q -o MEDS_data.zip\\n","rm MEDS_data/labels -r # We don\'t need that here\\n","\\n","apt-get -qq install tree\\n","tree MEDS_data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"s_1xWP1R86Iw","outputId":"c48ecaa4-b637-4879-94b5-57ab31b4341c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Selecting previously unselected package tree.\\r\\n","(Reading database ... \\r(Reading database ... 5%\\r(Reading database ... 10%\\r(Reading database ... 15%\\r(Reading database ... 20%\\r(Reading database ... 25%\\r(Reading database ... 30%\\r(Reading database ... 35%\\r(Reading database ... 40%\\r(Reading database ... 45%\\r(Reading database ... 50%\\r(Reading database ... 55%\\r(Reading database ... 60%\\r(Reading database ... 65%\\r(Reading database ... 70%\\r(Reading database ... 75%\\r(Reading database ... 80%\\r(Reading database ... 85%\\r(Reading database ... 90%\\r(Reading database ... 95%\\r(Reading database ... 100%\\r(Reading database ... 126284 files and directories currently installed.)\\r\\n","Preparing to unpack .../tree_2.0.2-1_amd64.deb ...\\r\\n","Unpacking tree (2.0.2-1) ...\\r\\n","Setting up tree (2.0.2-1) ...\\r\\n","Processing triggers for man-db (2.10.2-1) ...\\r\\n","MEDS_data\\n","\u251c\u2500\u2500 data\\n","\u2502\xa0\xa0 \u251c\u2500\u2500 held_out\\n","\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 0.parquet\\n","\u2502\xa0\xa0 \u251c\u2500\u2500 train\\n","\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 0.parquet\\n","\u2502\xa0\xa0 \u2514\u2500\u2500 tuning\\n","\u2502\xa0\xa0     \u2514\u2500\u2500 0.parquet\\n","\u2514\u2500\u2500 metadata\\n","    \u251c\u2500\u2500 codes.parquet\\n","    \u251c\u2500\u2500 dataset.json\\n","    \u2514\u2500\u2500 subject_splits.parquet\\n","\\n","5 directories, 6 files\\n"]}]},{"cell_type":"markdown","source":["Now that we have the data, how can we look through it? To help here, we\'ll use a simple function that will let us search through a dataframe via a text string. It\'s far from perfect, but will help us here:"],"metadata":{"id":"Bi2nBgVeAZaV"}},{"cell_type":"code","source":["import pandas as pd\\n","import ipywidgets as widgets\\n","from IPython.display import display\\n","from functools import partial\\n","\\n","def df_search(df: pd.DataFrame):\\n","  # Create a Text widget for the search input\\n","  search_input = widgets.Text(\\n","      value=\'\',\\n","      placeholder=\'Enter search term...\',\\n","      description=\'Search:\',\\n","      disabled=False\\n","  )\\n","\\n","  # Function to filter the DataFrame based on the search term\\n","  def filter_dataframe(df: pd.DataFrame, search_term: str):\\n","      if not search_term:\\n","        display(df)\\n","      else:\\n","        filtered_df = df[df.apply(lambda row: row.astype(str).str.contains(search_term, case=False).any(), axis=1)]\\n","        display(filtered_df)\\n","\\n","  # Create an interactive output to display the filtered DataFrame\\n","  output = widgets.interactive_output(\\n","      partial(filter_dataframe, df=df), {\'search_term\': search_input}\\n","  )\\n","\\n","  # Display the search input and the output\\n","  display(search_input, output)"],"metadata":{"id":"_f3LfinP-N47"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Let\'s see it in action by searching through the metadata first!"],"metadata":{"id":"5wDHNxIVAhLy"}},{"cell_type":"code","source":["metadata_df = pd.read_parquet(\\"MEDS_data/metadata/codes.parquet\\")[[\\"code\\", \\"description\\", \\"parent_codes\\"]]\\n","data_df = pd.read_parquet(\\"MEDS_data/data/train/0.parquet\\")[[\\"code\\", \\"text_value\\"]].drop_duplicates()"],"metadata":{"id":"HE63GyssATSA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_search(metadata_df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":456,"referenced_widgets":["ed2b5e81d904494bb4b0ede55b713c32","7fc9dab257ce4656ba0f2c08f0df58cb","0101bbb7f2c54ac180cdfc472b8c5952","0c5eda53f8f4414dafc819e3eb5ee11a","a92f315cd0c64fc587a837ac3bc70f07"]},"id":"eoZzOTcpAjyB","outputId":"93f117b0-b0aa-4200-acc5-596eaca46d82"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["Text(value=\'\', description=\'Search:\', placeholder=\'Enter search term...\')"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ed2b5e81d904494bb4b0ede55b713c32"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["Output()"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"0c5eda53f8f4414dafc819e3eb5ee11a"}},"metadata":{}}]},{"cell_type":"markdown","source":["In this case, the metadata doesn\'t seem that helpful. What about the data itself, via the code strings and text value fields?\\n","\\n","**NOTE** The search operation may take a long time and may seem to complete, but really only show results from a partial search."],"metadata":{"id":"pM_1iBdJArPf"}},{"cell_type":"code","source":["df_search(data_df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":456,"referenced_widgets":["98e4d8dcb49647d187f24acc6601d005","d04c91b4a9ab4c64a40c8f0524f88562","f223cdf2139444909d40c4ef23a55aba","5563afbdb4fd4a518d65b539878e7056","fe28b13d974e46d2ac54e82034f40430"]},"id":"ohsNh3yLAv67","outputId":"8f33533c-73f3-457c-b528-dd86a4879322"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["Text(value=\'\', description=\'Search:\', placeholder=\'Enter search term...\')"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"98e4d8dcb49647d187f24acc6601d005"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["Output()"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"5563afbdb4fd4a518d65b539878e7056"}},"metadata":{}}]},{"cell_type":"markdown","source":["In this case, for this tutorial, we\'ll just tell you how to define each of these predicates for our tutorial dataset (the MIMIC demo dataset):\\n","  1. ICU admissions have codes of the form `ICU_ADMISSION//*`\\n","  2. ICU discharges have codes of the form `ICU_DISCHARGE//*`\\n","  3. Death events have codes of the from `MEDS_DEATH*`\\n","  4. CMO events are either recorded with codes of the form `LAB//220001//UNK` or `LAB//223758//UNK` _and_ with text values that are either `\\"Comfort measures only\\"` or `\\"Comfort care (CMO, Comfort Measures)\\"`.\\n","  5. DNR events are either recorded with the same two codes used for CMO events, but with text values of any of the following forms:\\n","    - `\\"DNR / DNI\\"`\\n","    - `\\"DNAR (Do Not Attempt Resuscitation)  [DNR]\\"`\\n","    - `\\"DNAR (Do Not Attempt Resuscitation) [DNR] / DNI\\"`\\n","    - `\\"DNR (do not resuscitate)\\"`\\n","\\n","So, how can we represent this in our specification? Here, we\'ll introduce a bit of the formal ACES language, and show you how to represent all of that in an ACES predicate block -- it isn\'t quite a clean as some of the windows specification is, but it should be transparent when you see it.\\n","\\n","```yaml\\n","predicates:\\n","  icu_admission:\\n","    code: { regex: \\"^ICU_ADMISSION//.*\\" }\\n","  icu_discharge:\\n","    code: { regex: \\"^ICU_DISCHARGE//.*\\" }\\n","  death:\\n","    code: { regex: \\"MEDS_DEATH.*\\" }\\n","\\n","  # CMO predicates\\n","  cmo_1:\\n","    code: { any: [\\"LAB//220001//UNK\\", \\"LAB//223758//UNK\\"] }\\n","    text_value: \\"Comfort measures only\\"\\n","  cmo_2:\\n","    code: { any: [\\"LAB//220001//UNK\\", \\"LAB//223758//UNK\\"] }\\n","    text_value: \\"Comfort care (CMO, Comfort Measures)\\"\\n","\\n","  # DNR predicates\\n","  dnr_1:\\n","    code: { any: [\\"LAB//220001//UNK\\", \\"LAB//223758//UNK\\"] }\\n","    text_value: \\"DNR / DNI\\"\\n","  dnr_2:\\n","    code: { any: [\\"LAB//220001//UNK\\", \\"LAB//223758//UNK\\"] }\\n","    text_value: \\"DNAR (Do Not Attempt Resuscitation)  [DNR]\\"\\n","  dnr_3:\\n","    code: { any: [\\"LAB//220001//UNK\\", \\"LAB//223758//UNK\\"] }\\n","    text_value: \\"DNAR (Do Not Attempt Resuscitation) [DNR] / DNI\\"\\n","  dnr_4:\\n","    code: { any: [\\"LAB//220001//UNK\\", \\"LAB//223758//UNK\\"] }\\n","    text_value: \\"DNR (do not resuscitate)\\"\\n","\\n","  # derived predicates\\n","  cmo:\\n","    expr: or(cmo_1, cmo_2)\\n","  dnr:\\n","    expr: or(dnr_1, dnr_2, dnr_3, dnr_4)\\n","  death_or_discharge:\\n","    expr: or(icu_discharge, death)\\n","```"],"metadata":{"id":"43Kp2lB08qNG"}},{"cell_type":"markdown","source":["### Putting it all together"],"metadata":{"id":"bmvDfU_6OBcE"}},{"cell_type":"markdown","source":["Lastly, we need to clean up a few small aspects of our configuration file to put it all together. Let\'s see what the final config looks like:\\n","\\n","```yaml\\n","predicates:\\n","  icu_admission:\\n","    code: { regex: \\"^ICU_ADMISSION//.*\\" }\\n","  icu_discharge:\\n","    code: { regex: \\"^ICU_DISCHARGE//.*\\" }\\n","  death:\\n","    code: { regex: \\"MEDS_DEATH.*\\" }\\n","\\n","  # CMO predicates\\n","  cmo_1:\\n","    code: { any: [\\"LAB//220001//UNK\\", \\"LAB//223758//UNK\\"] }\\n","    text_value: \\"Comfort measures only\\"\\n","  cmo_2:\\n","    code: { any: [\\"LAB//220001//UNK\\", \\"LAB//223758//UNK\\"] }\\n","    text_value: \\"Comfort care (CMO, Comfort Measures)\\"\\n","\\n","  # DNR predicates\\n","  dnr_1:\\n","    code: { any: [\\"LAB//220001//UNK\\", \\"LAB//223758//UNK\\"] }\\n","    text_value: \\"DNR / DNI\\"\\n","  dnr_2:\\n","    code: { any: [\\"LAB//220001//UNK\\", \\"LAB//223758//UNK\\"] }\\n","    text_value: \\"DNAR (Do Not Attempt Resuscitation)  [DNR]\\"\\n","  dnr_3:\\n","    code: { any: [\\"LAB//220001//UNK\\", \\"LAB//223758//UNK\\"] }\\n","    text_value: \\"DNAR (Do Not Attempt Resuscitation) [DNR] / DNI\\"\\n","  dnr_4:\\n","    code: { any: [\\"LAB//220001//UNK\\", \\"LAB//223758//UNK\\"] }\\n","    text_value: \\"DNR (do not resuscitate)\\"\\n","\\n","  # derived predicates\\n","  cmo:\\n","    expr: or(cmo_1, cmo_2)\\n","  dnr:\\n","    expr: or(dnr_1, dnr_2, dnr_3, dnr_4)\\n","\\n","trigger: icu_admission\\n","\\n","windows:\\n","  input:\\n","    start: null\\n","    end: trigger + 24h\\n","    start_inclusive: True\\n","    end_inclusive: True\\n","    index_timestamp: end\\n","    has:\\n","      cmo: (None, 0) # Exclude patients on comfort measures only\\n","      dnr: (None, 0) # Exclude patients with DNR orders\\n","  gap:\\n","    start: trigger\\n","    end: start + 30h\\n","    start_inclusive: False\\n","    end_inclusive: True\\n","    has:\\n","      cmo: (None, 0)\\n","      dnr: (None, 0)\\n","      icu_discharge: (None, 0)\\n","  target:\\n","    start: trigger\\n","    end: start + 3d\\n","    start_inclusive: True\\n","    end_inclusive: True\\n","    label: icu_discharge\\n","    has:\\n","      death: (None, 0)\\n","```\\n","\\n","We can see there are a few small changes here.\\n","\\n","  1. Our syntax for specifying constraints is a bit different -- we give a range of a lower bound and an upper bound for the number of times a predicate can occur, instead of just saying \\"None\\".\\n","  2. We\'ve revised the gap window to encompass the discharge constraint over the full first 30 hours, and have it link to the trigger directly, rather than the input. This lets us also make the input window restrict the CMO or DNR constraint over the _full_ prior record, not just the 24 hours since the ICU stay started.\\n","  3. We\'ve added an `index_timestamp` key to the `input` window. This tells ACES when in the relative set of window endpoints we are allowed to use data up until for prediction.\\n","  4. We\'ve swapped the nature of the prediction for the target window. As ACES doesn\'t support a label being defined by the length of a window, only by predicates present or not, we now define the window to go for 3 days after the trigger and predict whether or not there is a discharge in that period. If so, the ICU stay must end within 3 days (and therefore is a short ICU stay). Note this inverts our notion of positive vs. negative label, but otherwise makes no other change. This also lets us exclude patients who die in that period appropriately."],"metadata":{"id":"PLEPG03BOWkM"}},{"cell_type":"markdown","source":["## Running ACES Extraction\\n"],"metadata":{"id":"ZmaeCkSaO1Xe"}},{"cell_type":"markdown","source":["Now that we have a fully defined task in the form of an ACES configuration file, how can we actually extract the labels for this task? Well, we can use the ACES CLI, of course!\\n","\\n","To use this, all we have to do is write our task configuration YAML specification to a file on disk, then run the ACES CLI in the right way. Let\'s see it!\\n","\\n","First, to write the task config:"],"metadata":{"id":"wkc4VRzNO70I"}},{"cell_type":"code","source":["from pathlib import Path\\n","\\n","task_cfg_yaml = \\"\\"\\"\\n","predicates:\\n","  icu_admission:\\n","    code: { regex: \\"^ICU_ADMISSION//.*\\" }\\n","  icu_discharge:\\n","    code: { regex: \\"^ICU_DISCHARGE//.*\\" }\\n","  death:\\n","    code: { regex: \\"MEDS_DEATH.*\\" }\\n","\\n","  # CMO predicates\\n","  cmo_1:\\n","    code: { any: [\\"LAB//220001//UNK\\", \\"LAB//223758//UNK\\"] }\\n","    text_value: \\"Comfort measures only\\"\\n","  cmo_2:\\n","    code: { any: [\\"LAB//220001//UNK\\", \\"LAB//223758//UNK\\"] }\\n","    text_value: \\"Comfort care (CMO, Comfort Measures)\\"\\n","\\n","  # DNR predicates\\n","  dnr_1:\\n","    code: { any: [\\"LAB//220001//UNK\\", \\"LAB//223758//UNK\\"] }\\n","    text_value: \\"DNR / DNI\\"\\n","  dnr_2:\\n","    code: { any: [\\"LAB//220001//UNK\\", \\"LAB//223758//UNK\\"] }\\n","    text_value: \\"DNAR (Do Not Attempt Resuscitation)  [DNR]\\"\\n","  dnr_3:\\n","    code: { any: [\\"LAB//220001//UNK\\", \\"LAB//223758//UNK\\"] }\\n","    text_value: \\"DNAR (Do Not Attempt Resuscitation) [DNR] / DNI\\"\\n","  dnr_4:\\n","    code: { any: [\\"LAB//220001//UNK\\", \\"LAB//223758//UNK\\"] }\\n","    text_value: \\"DNR (do not resuscitate)\\"\\n","\\n","  # derived predicates\\n","  cmo:\\n","    expr: or(cmo_1, cmo_2)\\n","  dnr:\\n","    expr: or(dnr_1, dnr_2, dnr_3, dnr_4)\\n","\\n","trigger: icu_admission\\n","\\n","windows:\\n","  input:\\n","    start: null\\n","    end: trigger + 24h\\n","    start_inclusive: True\\n","    end_inclusive: True\\n","    index_timestamp: end\\n","    has:\\n","      cmo: (None, 0) # Exclude patients on comfort measures only\\n","      dnr: (None, 0) # Exclude patients with DNR orders\\n","  gap:\\n","    start: trigger\\n","    end: start + 30h\\n","    start_inclusive: False\\n","    end_inclusive: True\\n","    has:\\n","      cmo: (None, 0)\\n","      dnr: (None, 0)\\n","      icu_discharge: (None, 0)\\n","  target:\\n","    start: trigger\\n","    end: start + 3d\\n","    start_inclusive: True\\n","    end_inclusive: True\\n","    label: icu_discharge\\n","    has:\\n","      death: (None, 0)\\n","\\"\\"\\"\\n","\\n","Path(\\"task_config.yaml\\").write_text(task_cfg_yaml);"],"metadata":{"id":"eCq9PIeVBPV9"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Now to run the command -- note that we\'ve renamed the task to `short_LOS` here, because we had to invert the label. A `True` indicates the subject has a length of stay less than 3 days, and `False` meant it was more."],"metadata":{"id":"PDw1-SiXCcEa"}},{"cell_type":"code","source":["%%bash\\n","pip install --quiet es-aces==0.7.1\\n","aces-cli \\\\\\n","    config_path=task_config.yaml \\\\\\n","    cohort_name=\\"short_LOS\\" \\\\\\n","    cohort_dir=\\"MEDS_data/labels\\" \\\\\\n","    data=sharded \\\\\\n","    data.standard=meds \\\\\\n","    data.root=MEDS_data/data \\\\\\n","    data.shard=$(expand_shards train/1 tuning/1 held_out/1) \\\\\\n","    -m"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4vwnYZNmBMLa","outputId":"7e82e729-fe44-4692-dcfa-1c882fb944da"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 61.0/61.0 kB 2.0 MB/s eta 0:00:00\\n","   \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 61.8/61.8 kB 2.7 MB/s eta 0:00:00\\n","   \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 76.2/76.2 kB 3.0 MB/s eta 0:00:00\\n","   \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 1.7/1.7 MB 7.9 MB/s eta 0:00:00\\n","   \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 118.6/118.6 kB 5.8 MB/s eta 0:00:00\\n","   \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 154.5/154.5 kB 4.8 MB/s eta 0:00:00\\n","   \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 18.3/18.3 MB 12.6 MB/s eta 0:00:00\\n","   \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 36.3/36.3 MB 10.2 MB/s eta 0:00:00\\n","   \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 739.1/739.1 kB 15.7 MB/s eta 0:00:00\\n","[2025-07-31 15:10:22,677][HYDRA] Launching 3 jobs locally\\n","[2025-07-31 15:10:22,677][HYDRA] \\t#0 : config_path=task_config.yaml cohort_name=short_LOS cohort_dir=MEDS_data/labels data=sharded data.standard=meds data.root=MEDS_data/data data.shard=train/0\\n","[2025-07-31 15:10:22,803][aces.run][INFO] - Loading config from \'task_config.yaml\'\\n","[2025-07-31 15:10:22,815][aces.config][INFO] - Parsing windows...\\n","[2025-07-31 15:10:22,816][aces.config][INFO] - Parsing trigger event...\\n","[2025-07-31 15:10:22,816][aces.config][INFO] - Parsing predicates...\\n","[2025-07-31 15:10:22,827][aces.run][INFO] - Attempting to get predicates dataframe given:\\n","standard: meds\\n","ts_format: \'%m/%d/%Y %H:%M\'\\n","root: MEDS_data/data\\n","shard: train/0\\n","path: ${data.root}/${data.shard}.parquet\\n","_prefix: /${data.shard}\\n","\\n","[2025-07-31 15:10:22,829][aces.predicates][INFO] - Loading MEDS data...\\n","[2025-07-31 15:10:23,246][aces.predicates][INFO] - Generating plain predicate columns...\\n","[2025-07-31 15:10:23,279][aces.predicates][INFO] - Added predicate column \'icu_admission\'.\\n","[2025-07-31 15:10:23,312][aces.predicates][INFO] - Added predicate column \'icu_discharge\'.\\n","[2025-07-31 15:10:23,359][aces.predicates][INFO] - Added predicate column \'death\'.\\n","[2025-07-31 15:10:23,376][aces.predicates][INFO] - Added predicate column \'cmo_1\'.\\n","[2025-07-31 15:10:23,392][aces.predicates][INFO] - Added predicate column \'cmo_2\'.\\n","[2025-07-31 15:10:23,408][aces.predicates][INFO] - Added predicate column \'dnr_1\'.\\n","[2025-07-31 15:10:23,424][aces.predicates][INFO] - Added predicate column \'dnr_2\'.\\n","[2025-07-31 15:10:23,441][aces.predicates][INFO] - Added predicate column \'dnr_3\'.\\n","[2025-07-31 15:10:23,457][aces.predicates][INFO] - Added predicate column \'dnr_4\'.\\n","[2025-07-31 15:10:23,457][aces.predicates][INFO] - Cleaning up predicates dataframe...\\n","[2025-07-31 15:10:23,663][aces.predicates][INFO] - Loaded plain predicates. Generating derived predicate columns...\\n","[2025-07-31 15:10:23,664][aces.predicates][INFO] - Added predicate column \'cmo\'.\\n","[2025-07-31 15:10:23,666][aces.predicates][INFO] - Added predicate column \'dnr\'.\\n","[2025-07-31 15:10:23,666][aces.predicates][INFO] - Generating special predicate columns...\\n","[2025-07-31 15:10:23,666][aces.query][INFO] - Checking if \'(subject_id, timestamp)\' columns are unique...\\n","[2025-07-31 15:10:23,677][aces.utils][INFO] - \\n","trigger\\n","\u2523\u2501\u2501 input.end\\n","\u2503   \u2517\u2501\u2501 input.start\\n","\u2523\u2501\u2501 gap.end\\n","\u2517\u2501\u2501 target.end\\n","\\n","[2025-07-31 15:10:23,677][aces.query][INFO] - Beginning query...\\n","[2025-07-31 15:10:23,677][aces.query][INFO] - No static variable criteria specified, removing all rows with null timestamps...\\n","[2025-07-31 15:10:23,680][aces.query][INFO] - Identifying possible trigger nodes based on the specified trigger event...\\n","[2025-07-31 15:10:23,681][aces.constraints][INFO] - Excluding 72,774 rows as they failed to satisfy \'1 <= icu_admission <= None\'.\\n","[2025-07-31 15:10:23,682][aces.extract_subtree][INFO] - Summarizing subtree rooted at \'input.end\'...\\n","[2025-07-31 15:10:23,807][aces.extract_subtree][INFO] - Summarizing subtree rooted at \'input.start\'...\\n","[2025-07-31 15:10:24,044][aces.constraints][INFO] - Excluding 0 rows as they failed to satisfy \'None <= cmo <= 0\'.\\n","[2025-07-31 15:10:24,045][aces.constraints][INFO] - Excluding 3 rows as they failed to satisfy \'None <= dnr <= 0\'.\\n","[2025-07-31 15:10:24,049][aces.extract_subtree][INFO] - Summarizing subtree rooted at \'gap.end\'...\\n","[2025-07-31 15:10:24,178][aces.constraints][INFO] - Excluding 0 rows as they failed to satisfy \'None <= cmo <= 0\'.\\n","[2025-07-31 15:10:24,179][aces.constraints][INFO] - Excluding 1 rows as they failed to satisfy \'None <= dnr <= 0\'.\\n","[2025-07-31 15:10:24,179][aces.constraints][INFO] - Excluding 35 rows as they failed to satisfy \'None <= icu_discharge <= 0\'.\\n","[2025-07-31 15:10:24,182][aces.extract_subtree][INFO] - Summarizing subtree rooted at \'target.end\'...\\n","[2025-07-31 15:10:24,315][aces.constraints][INFO] - Excluding 3 rows as they failed to satisfy \'None <= death <= 0\'.\\n","[2025-07-31 15:10:24,319][aces.query][INFO] - Done. 74 valid rows returned corresponding to 57 subjects.\\n","[2025-07-31 15:10:24,319][aces.query][INFO] - Extracting label \'icu_discharge\' from window \'target\'...\\n","[2025-07-31 15:10:24,320][aces.query][INFO] - Setting index timestamp as \'end\' of window \'input\'...\\n","[2025-07-31 15:10:24,323][aces.run][WARNING] - Output contains columns that are not valid MEDS label columns. For now, we are dropping them.\\n","If you need these columns, please comment on https://github.com/justin13601/ACES/issues/97\\n","Columns:\\n","  - trigger\\n","  - input.end_summary\\n","  - input.start_summary\\n","  - gap.end_summary\\n","  - target.end_summary\\n","[2025-07-31 15:10:24,331][aces.run][INFO] - Completed in 0:00:01.526181. Results saved to \'MEDS_data/labels/short_LOS/train/0.parquet\'.\\n","[2025-07-31 15:10:24,332][HYDRA] \\t#1 : config_path=task_config.yaml cohort_name=short_LOS cohort_dir=MEDS_data/labels data=sharded data.standard=meds data.root=MEDS_data/data data.shard=tuning/0\\n","[2025-07-31 15:10:24,467][aces.run][INFO] - Loading config from \'task_config.yaml\'\\n","[2025-07-31 15:10:24,477][aces.config][INFO] - Parsing windows...\\n","[2025-07-31 15:10:24,478][aces.config][INFO] - Parsing trigger event...\\n","[2025-07-31 15:10:24,478][aces.config][INFO] - Parsing predicates...\\n","[2025-07-31 15:10:24,479][aces.run][INFO] - Attempting to get predicates dataframe given:\\n","standard: meds\\n","ts_format: \'%m/%d/%Y %H:%M\'\\n","root: MEDS_data/data\\n","shard: tuning/0\\n","path: ${data.root}/${data.shard}.parquet\\n","_prefix: /${data.shard}\\n","\\n","[2025-07-31 15:10:24,480][aces.predicates][INFO] - Loading MEDS data...\\n","[2025-07-31 15:10:24,520][aces.predicates][INFO] - Generating plain predicate columns...\\n","[2025-07-31 15:10:24,524][aces.predicates][INFO] - Added predicate column \'icu_admission\'.\\n","[2025-07-31 15:10:24,530][aces.predicates][INFO] - Added predicate column \'icu_discharge\'.\\n","[2025-07-31 15:10:24,539][aces.predicates][INFO] - Added predicate column \'death\'.\\n","[2025-07-31 15:10:24,542][aces.predicates][INFO] - Added predicate column \'cmo_1\'.\\n","[2025-07-31 15:10:24,545][aces.predicates][INFO] - Added predicate column \'cmo_2\'.\\n","[2025-07-31 15:10:24,548][aces.predicates][INFO] - Added predicate column \'dnr_1\'.\\n","[2025-07-31 15:10:24,552][aces.predicates][INFO] - Added predicate column \'dnr_2\'.\\n","[2025-07-31 15:10:24,557][aces.predicates][INFO] - Added predicate column \'dnr_3\'.\\n","[2025-07-31 15:10:24,561][aces.predicates][INFO] - Added predicate column \'dnr_4\'.\\n","[2025-07-31 15:10:24,562][aces.predicates][INFO] - Cleaning up predicates dataframe...\\n","[2025-07-31 15:10:24,574][aces.predicates][INFO] - Loaded plain predicates. Generating derived predicate columns...\\n","[2025-07-31 15:10:24,575][aces.predicates][INFO] - Added predicate column \'cmo\'.\\n","[2025-07-31 15:10:24,575][aces.predicates][INFO] - Added predicate column \'dnr\'.\\n","[2025-07-31 15:10:24,575][aces.predicates][INFO] - Generating special predicate columns...\\n","[2025-07-31 15:10:24,575][aces.query][INFO] - Checking if \'(subject_id, timestamp)\' columns are unique...\\n","[2025-07-31 15:10:24,577][aces.utils][INFO] - \\n","trigger\\n","\u2523\u2501\u2501 input.end\\n","\u2503   \u2517\u2501\u2501 input.start\\n","\u2523\u2501\u2501 gap.end\\n","\u2517\u2501\u2501 target.end\\n","\\n","[2025-07-31 15:10:24,577][aces.query][INFO] - Beginning query...\\n","[2025-07-31 15:10:24,577][aces.query][INFO] - No static variable criteria specified, removing all rows with null timestamps...\\n","[2025-07-31 15:10:24,578][aces.query][INFO] - Identifying possible trigger nodes based on the specified trigger event...\\n","[2025-07-31 15:10:24,578][aces.constraints][INFO] - Excluding 6,242 rows as they failed to satisfy \'1 <= icu_admission <= None\'.\\n","[2025-07-31 15:10:24,579][aces.extract_subtree][INFO] - Summarizing subtree rooted at \'input.end\'...\\n","[2025-07-31 15:10:24,593][aces.extract_subtree][INFO] - Summarizing subtree rooted at \'input.start\'...\\n","[2025-07-31 15:10:24,617][aces.constraints][INFO] - Excluding 0 rows as they failed to satisfy \'None <= cmo <= 0\'.\\n","[2025-07-31 15:10:24,618][aces.constraints][INFO] - Excluding 0 rows as they failed to satisfy \'None <= dnr <= 0\'.\\n","[2025-07-31 15:10:24,622][aces.extract_subtree][INFO] - Summarizing subtree rooted at \'gap.end\'...\\n","[2025-07-31 15:10:24,636][aces.constraints][INFO] - Excluding 0 rows as they failed to satisfy \'None <= cmo <= 0\'.\\n","[2025-07-31 15:10:24,636][aces.constraints][INFO] - Excluding 0 rows as they failed to satisfy \'None <= dnr <= 0\'.\\n","[2025-07-31 15:10:24,636][aces.constraints][INFO] - Excluding 5 rows as they failed to satisfy \'None <= icu_discharge <= 0\'.\\n","[2025-07-31 15:10:24,638][aces.extract_subtree][INFO] - Summarizing subtree rooted at \'target.end\'...\\n","[2025-07-31 15:10:24,652][aces.constraints][INFO] - Excluding 0 rows as they failed to satisfy \'None <= death <= 0\'.\\n","[2025-07-31 15:10:24,655][aces.query][INFO] - Done. 10 valid rows returned corresponding to 7 subjects.\\n","[2025-07-31 15:10:24,655][aces.query][INFO] - Extracting label \'icu_discharge\' from window \'target\'...\\n","[2025-07-31 15:10:24,656][aces.query][INFO] - Setting index timestamp as \'end\' of window \'input\'...\\n","[2025-07-31 15:10:24,659][aces.run][WARNING] - Output contains columns that are not valid MEDS label columns. For now, we are dropping them.\\n","If you need these columns, please comment on https://github.com/justin13601/ACES/issues/97\\n","Columns:\\n","  - trigger\\n","  - input.end_summary\\n","  - input.start_summary\\n","  - gap.end_summary\\n","  - target.end_summary\\n","[2025-07-31 15:10:24,664][aces.run][INFO] - Completed in 0:00:00.196449. Results saved to \'MEDS_data/labels/short_LOS/tuning/0.parquet\'.\\n","[2025-07-31 15:10:24,666][HYDRA] \\t#2 : config_path=task_config.yaml cohort_name=short_LOS cohort_dir=MEDS_data/labels data=sharded data.standard=meds data.root=MEDS_data/data data.shard=held_out/0\\n","[2025-07-31 15:10:24,878][aces.run][INFO] - Loading config from \'task_config.yaml\'\\n","[2025-07-31 15:10:24,889][aces.config][INFO] - Parsing windows...\\n","[2025-07-31 15:10:24,889][aces.config][INFO] - Parsing trigger event...\\n","[2025-07-31 15:10:24,889][aces.config][INFO] - Parsing predicates...\\n","[2025-07-31 15:10:24,891][aces.run][INFO] - Attempting to get predicates dataframe given:\\n","standard: meds\\n","ts_format: \'%m/%d/%Y %H:%M\'\\n","root: MEDS_data/data\\n","shard: held_out/0\\n","path: ${data.root}/${data.shard}.parquet\\n","_prefix: /${data.shard}\\n","\\n","[2025-07-31 15:10:24,892][aces.predicates][INFO] - Loading MEDS data...\\n","[2025-07-31 15:10:24,922][aces.predicates][INFO] - Generating plain predicate columns...\\n","[2025-07-31 15:10:24,925][aces.predicates][INFO] - Added predicate column \'icu_admission\'.\\n","[2025-07-31 15:10:24,927][aces.predicates][INFO] - Added predicate column \'icu_discharge\'.\\n","[2025-07-31 15:10:24,931][aces.predicates][INFO] - Added predicate column \'death\'.\\n","[2025-07-31 15:10:24,933][aces.predicates][INFO] - Added predicate column \'cmo_1\'.\\n","[2025-07-31 15:10:24,934][aces.predicates][INFO] - Added predicate column \'cmo_2\'.\\n","[2025-07-31 15:10:24,936][aces.predicates][INFO] - Added predicate column \'dnr_1\'.\\n","[2025-07-31 15:10:24,937][aces.predicates][INFO] - Added predicate column \'dnr_2\'.\\n","[2025-07-31 15:10:24,939][aces.predicates][INFO] - Added predicate column \'dnr_3\'.\\n","[2025-07-31 15:10:24,941][aces.predicates][INFO] - Added predicate column \'dnr_4\'.\\n","[2025-07-31 15:10:24,941][aces.predicates][INFO] - Cleaning up predicates dataframe...\\n","[2025-07-31 15:10:24,947][aces.predicates][INFO] - Loaded plain predicates. Generating derived predicate columns...\\n","[2025-07-31 15:10:24,948][aces.predicates][INFO] - Added predicate column \'cmo\'.\\n","[2025-07-31 15:10:24,948][aces.predicates][INFO] - Added predicate column \'dnr\'.\\n","[2025-07-31 15:10:24,949][aces.predicates][INFO] - Generating special predicate columns...\\n","[2025-07-31 15:10:24,949][aces.query][INFO] - Checking if \'(subject_id, timestamp)\' columns are unique...\\n","[2025-07-31 15:10:24,950][aces.utils][INFO] - \\n","trigger\\n","\u2523\u2501\u2501 input.end\\n","\u2503   \u2517\u2501\u2501 input.start\\n","\u2523\u2501\u2501 gap.end\\n","\u2517\u2501\u2501 target.end\\n","\\n","[2025-07-31 15:10:24,950][aces.query][INFO] - Beginning query...\\n","[2025-07-31 15:10:24,950][aces.query][INFO] - No static variable criteria specified, removing all rows with null timestamps...\\n","[2025-07-31 15:10:24,951][aces.query][INFO] - Identifying possible trigger nodes based on the specified trigger event...\\n","[2025-07-31 15:10:24,951][aces.constraints][INFO] - Excluding 4,163 rows as they failed to satisfy \'1 <= icu_admission <= None\'.\\n","[2025-07-31 15:10:24,952][aces.extract_subtree][INFO] - Summarizing subtree rooted at \'input.end\'...\\n","[2025-07-31 15:10:24,961][aces.extract_subtree][INFO] - Summarizing subtree rooted at \'input.start\'...\\n","[2025-07-31 15:10:24,979][aces.constraints][INFO] - Excluding 0 rows as they failed to satisfy \'None <= cmo <= 0\'.\\n","[2025-07-31 15:10:24,980][aces.constraints][INFO] - Excluding 0 rows as they failed to satisfy \'None <= dnr <= 0\'.\\n","[2025-07-31 15:10:24,983][aces.extract_subtree][INFO] - Summarizing subtree rooted at \'gap.end\'...\\n","[2025-07-31 15:10:24,992][aces.constraints][INFO] - Excluding 0 rows as they failed to satisfy \'None <= cmo <= 0\'.\\n","[2025-07-31 15:10:24,993][aces.constraints][INFO] - Excluding 0 rows as they failed to satisfy \'None <= dnr <= 0\'.\\n","[2025-07-31 15:10:24,993][aces.constraints][INFO] - Excluding 4 rows as they failed to satisfy \'None <= icu_discharge <= 0\'.\\n","[2025-07-31 15:10:24,995][aces.extract_subtree][INFO] - Summarizing subtree rooted at \'target.end\'...\\n","[2025-07-31 15:10:25,005][aces.constraints][INFO] - Excluding 1 rows as they failed to satisfy \'None <= death <= 0\'.\\n","[2025-07-31 15:10:25,008][aces.query][INFO] - Done. 8 valid rows returned corresponding to 6 subjects.\\n","[2025-07-31 15:10:25,009][aces.query][INFO] - Extracting label \'icu_discharge\' from window \'target\'...\\n","[2025-07-31 15:10:25,009][aces.query][INFO] - Setting index timestamp as \'end\' of window \'input\'...\\n","[2025-07-31 15:10:25,012][aces.run][WARNING] - Output contains columns that are not valid MEDS label columns. For now, we are dropping them.\\n","If you need these columns, please comment on https://github.com/justin13601/ACES/issues/97\\n","Columns:\\n","  - trigger\\n","  - input.end_summary\\n","  - input.start_summary\\n","  - gap.end_summary\\n","  - target.end_summary\\n","[2025-07-31 15:10:25,016][aces.run][INFO] - Completed in 0:00:00.137151. Results saved to \'MEDS_data/labels/short_LOS/held_out/0.parquet\'.\\n"]},{"output_type":"stream","name":"stderr","text":["ERROR: pip\'s dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\\n","opencv-python 4.12.0.88 requires numpy<2.3.0,>=2; python_version >= \\"3.9\\", but you have numpy 1.26.4 which is incompatible.\\n","opencv-python-headless 4.12.0.88 requires numpy<2.3.0,>=2; python_version >= \\"3.9\\", but you have numpy 1.26.4 which is incompatible.\\n","opencv-contrib-python 4.12.0.88 requires numpy<2.3.0,>=2; python_version >= \\"3.9\\", but you have numpy 1.26.4 which is incompatible.\\n","torch 2.6.0+cu124 requires nvidia-cublas-cu12==12.4.5.8; platform_system == \\"Linux\\" and platform_machine == \\"x86_64\\", but you have nvidia-cublas-cu12 12.5.3.2 which is incompatible.\\n","torch 2.6.0+cu124 requires nvidia-cuda-cupti-cu12==12.4.127; platform_system == \\"Linux\\" and platform_machine == \\"x86_64\\", but you have nvidia-cuda-cupti-cu12 12.5.82 which is incompatible.\\n","torch 2.6.0+cu124 requires nvidia-cuda-nvrtc-cu12==12.4.127; platform_system == \\"Linux\\" and platform_machine == \\"x86_64\\", but you have nvidia-cuda-nvrtc-cu12 12.5.82 which is incompatible.\\n","torch 2.6.0+cu124 requires nvidia-cuda-runtime-cu12==12.4.127; platform_system == \\"Linux\\" and platform_machine == \\"x86_64\\", but you have nvidia-cuda-runtime-cu12 12.5.82 which is incompatible.\\n","torch 2.6.0+cu124 requires nvidia-cudnn-cu12==9.1.0.70; platform_system == \\"Linux\\" and platform_machine == \\"x86_64\\", but you have nvidia-cudnn-cu12 9.3.0.75 which is incompatible.\\n","torch 2.6.0+cu124 requires nvidia-cufft-cu12==11.2.1.3; platform_system == \\"Linux\\" and platform_machine == \\"x86_64\\", but you have nvidia-cufft-cu12 11.2.3.61 which is incompatible.\\n","torch 2.6.0+cu124 requires nvidia-curand-cu12==10.3.5.147; platform_system == \\"Linux\\" and platform_machine == \\"x86_64\\", but you have nvidia-curand-cu12 10.3.6.82 which is incompatible.\\n","torch 2.6.0+cu124 requires nvidia-cusolver-cu12==11.6.1.9; platform_system == \\"Linux\\" and platform_machine == \\"x86_64\\", but you have nvidia-cusolver-cu12 11.6.3.83 which is incompatible.\\n","torch 2.6.0+cu124 requires nvidia-cusparse-cu12==12.3.1.170; platform_system == \\"Linux\\" and platform_machine == \\"x86_64\\", but you have nvidia-cusparse-cu12 12.5.1.3 which is incompatible.\\n","torch 2.6.0+cu124 requires nvidia-nvjitlink-cu12==12.4.127; platform_system == \\"Linux\\" and platform_machine == \\"x86_64\\", but you have nvidia-nvjitlink-cu12 12.5.82 which is incompatible.\\n","thinc 8.3.6 requires numpy<3.0.0,>=2.0.0, but you have numpy 1.26.4 which is incompatible.\\n","cudf-polars-cu12 25.6.0 requires polars<1.29,>=1.25, but you have polars 1.30.0 which is incompatible.\\n"]}]},{"cell_type":"code","source":["%%bash\\n","tree MEDS_data/labels"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fnXN1n7eCHgO","outputId":"07b33b1a-29a0-405f-e70f-a2a926f7dbf0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["MEDS_data/labels\\n","\u2514\u2500\u2500 short_LOS\\n","    \u251c\u2500\u2500 held_out\\n","    \u2502\xa0\xa0 \u2514\u2500\u2500 0.parquet\\n","    \u251c\u2500\u2500 train\\n","    \u2502\xa0\xa0 \u2514\u2500\u2500 0.parquet\\n","    \u2514\u2500\u2500 tuning\\n","        \u2514\u2500\u2500 0.parquet\\n","\\n","4 directories, 3 files\\n"]}]},{"cell_type":"markdown","source":["What do the labels look like? Let\'s open one up and see:"],"metadata":{"id":"_M5ed6O-CQLx"}},{"cell_type":"code","source":["pd.read_parquet(\\"MEDS_data/labels/short_LOS/train/0.parquet\\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"X2ma8DVLCSWQ","outputId":"56b6a62c-c1d4-410f-c3a4-61351d88ced3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    subject_id     prediction_time  boolean_value  integer_value  float_value  \\\\\\n","0     10002428 2156-04-13 16:24:18          False            NaN          NaN   \\n","1     10002428 2156-04-20 18:11:19          False            NaN          NaN   \\n","2     10002428 2156-05-01 21:53:00           True            NaN          NaN   \\n","3     10002428 2156-05-12 14:49:34          False            NaN          NaN   \\n","4     10002495 2141-05-23 20:18:01          False            NaN          NaN   \\n","..         ...                 ...            ...            ...          ...   \\n","69    10038933 2148-09-11 13:19:00          False            NaN          NaN   \\n","70    10038999 2131-05-23 21:50:33          False            NaN          NaN   \\n","71    10039708 2140-01-24 18:08:00          False            NaN          NaN   \\n","72    10039708 2140-06-19 01:41:00           True            NaN          NaN   \\n","73    10040025 2148-01-25 04:50:17          False            NaN          NaN   \\n","\\n","   categorical_value  \\n","0               None  \\n","1               None  \\n","2               None  \\n","3               None  \\n","4               None  \\n","..               ...  \\n","69              None  \\n","70              None  \\n","71              None  \\n","72              None  \\n","73              None  \\n","\\n","[74 rows x 6 columns]"],"text/html":["\\n","  <div id=\\"df-16aaeb6e-c15d-46f2-99bc-28717e37a359\\" class=\\"colab-df-container\\">\\n","    <div>\\n","<style scoped>\\n","    .dataframe tbody tr th:only-of-type {\\n","        vertical-align: middle;\\n","    }\\n","\\n","    .dataframe tbody tr th {\\n","        vertical-align: top;\\n","    }\\n","\\n","    .dataframe thead th {\\n","        text-align: right;\\n","    }\\n","</style>\\n","<table border=\\"1\\" class=\\"dataframe\\">\\n","  <thead>\\n","    <tr style=\\"text-align: right;\\">\\n","      <th></th>\\n","      <th>subject_id</th>\\n","      <th>prediction_time</th>\\n","      <th>boolean_value</th>\\n","      <th>integer_value</th>\\n","      <th>float_value</th>\\n","      <th>categorical_value</th>\\n","    </tr>\\n","  </thead>\\n","  <tbody>\\n","    <tr>\\n","      <th>0</th>\\n","      <td>10002428</td>\\n","      <td>2156-04-13 16:24:18</td>\\n","      <td>False</td>\\n","      <td>NaN</td>\\n","      <td>NaN</td>\\n","      <td>None</td>\\n","    </tr>\\n","    <tr>\\n","      <th>1</th>\\n","      <td>10002428</td>\\n","      <td>2156-04-20 18:11:19</td>\\n","      <td>False</td>\\n","      <td>NaN</td>\\n","      <td>NaN</td>\\n","      <td>None</td>\\n","    </tr>\\n","    <tr>\\n","      <th>2</th>\\n","      <td>10002428</td>\\n","      <td>2156-05-01 21:53:00</td>\\n","      <td>True</td>\\n","      <td>NaN</td>\\n","      <td>NaN</td>\\n","      <td>None</td>\\n","    </tr>\\n","    <tr>\\n","      <th>3</th>\\n","      <td>10002428</td>\\n","      <td>2156-05-12 14:49:34</td>\\n","      <td>False</td>\\n","      <td>NaN</td>\\n","      <td>NaN</td>\\n","      <td>None</td>\\n","    </tr>\\n","    <tr>\\n","      <th>4</th>\\n","      <td>10002495</td>\\n","      <td>2141-05-23 20:18:01</td>\\n","      <td>False</td>\\n","      <td>NaN</td>\\n","      <td>NaN</td>\\n","      <td>None</td>\\n","    </tr>\\n","    <tr>\\n","      <th>...</th>\\n","      <td>...</td>\\n","      <td>...</td>\\n","      <td>...</td>\\n","      <td>...</td>\\n","      <td>...</td>\\n","      <td>...</td>\\n","    </tr>\\n","    <tr>\\n","      <th>69</th>\\n","      <td>10038933</td>\\n","      <td>2148-09-11 13:19:00</td>\\n","      <td>False</td>\\n","      <td>NaN</td>\\n","      <td>NaN</td>\\n","      <td>None</td>\\n","    </tr>\\n","    <tr>\\n","      <th>70</th>\\n","      <td>10038999</td>\\n","      <td>2131-05-23 21:50:33</td>\\n","      <td>False</td>\\n","      <td>NaN</td>\\n","      <td>NaN</td>\\n","      <td>None</td>\\n","    </tr>\\n","    <tr>\\n","      <th>71</th>\\n","      <td>10039708</td>\\n","      <td>2140-01-24 18:08:00</td>\\n","      <td>False</td>\\n","      <td>NaN</td>\\n","      <td>NaN</td>\\n","      <td>None</td>\\n","    </tr>\\n","    <tr>\\n","      <th>72</th>\\n","      <td>10039708</td>\\n","      <td>2140-06-19 01:41:00</td>\\n","      <td>True</td>\\n","      <td>NaN</td>\\n","      <td>NaN</td>\\n","      <td>None</td>\\n","    </tr>\\n","    <tr>\\n","      <th>73</th>\\n","      <td>10040025</td>\\n","      <td>2148-01-25 04:50:17</td>\\n","      <td>False</td>\\n","      <td>NaN</td>\\n","      <td>NaN</td>\\n","      <td>None</td>\\n","    </tr>\\n","  </tbody>\\n","</table>\\n","<p>74 rows \xd7 6 columns</p>\\n","</div>\\n","    <div class=\\"colab-df-buttons\\">\\n","\\n","  <div class=\\"colab-df-container\\">\\n","    <button class=\\"colab-df-convert\\" onclick=\\"convertToInteractive(\'df-16aaeb6e-c15d-46f2-99bc-28717e37a359\')\\"\\n","            title=\\"Convert this dataframe to an interactive table.\\"\\n","            style=\\"display:none;\\">\\n","\\n","  <svg xmlns=\\"http://www.w3.org/2000/svg\\" height=\\"24px\\" viewBox=\\"0 -960 960 960\\">\\n","    <path d=\\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\\"/>\\n","  </svg>\\n","    </button>\\n","\\n","  <style>\\n","    .colab-df-container {\\n","      display:flex;\\n","      gap: 12px;\\n","    }\\n","\\n","    .colab-df-convert {\\n","      background-color: #E8F0FE;\\n","      border: none;\\n","      border-radius: 50%;\\n","      cursor: pointer;\\n","      display: none;\\n","      fill: #1967D2;\\n","      height: 32px;\\n","      padding: 0 0 0 0;\\n","      width: 32px;\\n","    }\\n","\\n","    .colab-df-convert:hover {\\n","      background-color: #E2EBFA;\\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\\n","      fill: #174EA6;\\n","    }\\n","\\n","    .colab-df-buttons div {\\n","      margin-bottom: 4px;\\n","    }\\n","\\n","    [theme=dark] .colab-df-convert {\\n","      background-color: #3B4455;\\n","      fill: #D2E3FC;\\n","    }\\n","\\n","    [theme=dark] .colab-df-convert:hover {\\n","      background-color: #434B5C;\\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\\n","      fill: #FFFFFF;\\n","    }\\n","  </style>\\n","\\n","    <script>\\n","      const buttonEl =\\n","        document.querySelector(\'#df-16aaeb6e-c15d-46f2-99bc-28717e37a359 button.colab-df-convert\');\\n","      buttonEl.style.display =\\n","        google.colab.kernel.accessAllowed ? \'block\' : \'none\';\\n","\\n","      async function convertToInteractive(key) {\\n","        const element = document.querySelector(\'#df-16aaeb6e-c15d-46f2-99bc-28717e37a359\');\\n","        const dataTable =\\n","          await google.colab.kernel.invokeFunction(\'convertToInteractive\',\\n","                                                    [key], {});\\n","        if (!dataTable) return;\\n","\\n","        const docLinkHtml = \'Like what you see? Visit the \' +\\n","          \'<a target=\\"_blank\\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>\'\\n","          + \' to learn more about interactive tables.\';\\n","        element.innerHTML = \'\';\\n","        dataTable[\'output_type\'] = \'display_data\';\\n","        await google.colab.output.renderOutput(dataTable, element);\\n","        const docLink = document.createElement(\'div\');\\n","        docLink.innerHTML = docLinkHtml;\\n","        element.appendChild(docLink);\\n","      }\\n","    <\/script>\\n","  </div>\\n","\\n","\\n","    <div id=\\"df-af8be797-0e57-4b8c-813e-88e1323dea05\\">\\n","      <button class=\\"colab-df-quickchart\\" onclick=\\"quickchart(\'df-af8be797-0e57-4b8c-813e-88e1323dea05\')\\"\\n","                title=\\"Suggest charts\\"\\n","                style=\\"display:none;\\">\\n","\\n","<svg xmlns=\\"http://www.w3.org/2000/svg\\" height=\\"24px\\"viewBox=\\"0 0 24 24\\"\\n","     width=\\"24px\\">\\n","    <g>\\n","        <path d=\\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\\"/>\\n","    </g>\\n","</svg>\\n","      </button>\\n","\\n","<style>\\n","  .colab-df-quickchart {\\n","      --bg-color: #E8F0FE;\\n","      --fill-color: #1967D2;\\n","      --hover-bg-color: #E2EBFA;\\n","      --hover-fill-color: #174EA6;\\n","      --disabled-fill-color: #AAA;\\n","      --disabled-bg-color: #DDD;\\n","  }\\n","\\n","  [theme=dark] .colab-df-quickchart {\\n","      --bg-color: #3B4455;\\n","      --fill-color: #D2E3FC;\\n","      --hover-bg-color: #434B5C;\\n","      --hover-fill-color: #FFFFFF;\\n","      --disabled-bg-color: #3B4455;\\n","      --disabled-fill-color: #666;\\n","  }\\n","\\n","  .colab-df-quickchart {\\n","    background-color: var(--bg-color);\\n","    border: none;\\n","    border-radius: 50%;\\n","    cursor: pointer;\\n","    display: none;\\n","    fill: var(--fill-color);\\n","    height: 32px;\\n","    padding: 0;\\n","    width: 32px;\\n","  }\\n","\\n","  .colab-df-quickchart:hover {\\n","    background-color: var(--hover-bg-color);\\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\\n","    fill: var(--button-hover-fill-color);\\n","  }\\n","\\n","  .colab-df-quickchart-complete:disabled,\\n","  .colab-df-quickchart-complete:disabled:hover {\\n","    background-color: var(--disabled-bg-color);\\n","    fill: var(--disabled-fill-color);\\n","    box-shadow: none;\\n","  }\\n","\\n","  .colab-df-spinner {\\n","    border: 2px solid var(--fill-color);\\n","    border-color: transparent;\\n","    border-bottom-color: var(--fill-color);\\n","    animation:\\n","      spin 1s steps(1) infinite;\\n","  }\\n","\\n","  @keyframes spin {\\n","    0% {\\n","      border-color: transparent;\\n","      border-bottom-color: var(--fill-color);\\n","      border-left-color: var(--fill-color);\\n","    }\\n","    20% {\\n","      border-color: transparent;\\n","      border-left-color: var(--fill-color);\\n","      border-top-color: var(--fill-color);\\n","    }\\n","    30% {\\n","      border-color: transparent;\\n","      border-left-color: var(--fill-color);\\n","      border-top-color: var(--fill-color);\\n","      border-right-color: var(--fill-color);\\n","    }\\n","    40% {\\n","      border-color: transparent;\\n","      border-right-color: var(--fill-color);\\n","      border-top-color: var(--fill-color);\\n","    }\\n","    60% {\\n","      border-color: transparent;\\n","      border-right-color: var(--fill-color);\\n","    }\\n","    80% {\\n","      border-color: transparent;\\n","      border-right-color: var(--fill-color);\\n","      border-bottom-color: var(--fill-color);\\n","    }\\n","    90% {\\n","      border-color: transparent;\\n","      border-bottom-color: var(--fill-color);\\n","    }\\n","  }\\n","</style>\\n","\\n","      <script>\\n","        async function quickchart(key) {\\n","          const quickchartButtonEl =\\n","            document.querySelector(\'#\' + key + \' button\');\\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\\n","          quickchartButtonEl.classList.add(\'colab-df-spinner\');\\n","          try {\\n","            const charts = await google.colab.kernel.invokeFunction(\\n","                \'suggestCharts\', [key], {});\\n","          } catch (error) {\\n","            console.error(\'Error during call to suggestCharts:\', error);\\n","          }\\n","          quickchartButtonEl.classList.remove(\'colab-df-spinner\');\\n","          quickchartButtonEl.classList.add(\'colab-df-quickchart-complete\');\\n","        }\\n","        (() => {\\n","          let quickchartButtonEl =\\n","            document.querySelector(\'#df-af8be797-0e57-4b8c-813e-88e1323dea05 button\');\\n","          quickchartButtonEl.style.display =\\n","            google.colab.kernel.accessAllowed ? \'block\' : \'none\';\\n","        })();\\n","      <\/script>\\n","    </div>\\n","\\n","    </div>\\n","  </div>\\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","repr_error":"Out of range float values are not JSON compliant: nan"}},"metadata":{},"execution_count":17}]},{"cell_type":"markdown","source":["## Wrapping Up\\n"],"metadata":{"id":"4ZL5CXPVPLqP"}},{"cell_type":"markdown","source":["And that\'s it! Through this tutorial, you\'ve:\\n","\\n","1. Started with a vague task (\u201cpredict long ICU stay\u201d)\\n","\\n","2. Iteratively refined it through clinical + modeling questions\\n","\\n","3. Created a structured conceptual spec\\n","\\n","4. Translated that into a formal ACES task config\\n","\\n","5. Prepared to extract a high-quality prediction cohort\\n","\\n","This workflow makes it easy to build clinically relevant, reproducible machine learning tasks directly from EHR data in the MEDS format."],"metadata":{"id":"NZERIPEdPJ7z"}}]}'),s={sidebar_position:3},c="Extracting a Prediction Task",u={},h=[];function p(e){const n={a:"a",h1:"h1",header:"header",p:"p",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"extracting-a-prediction-task",children:"Extracting a Prediction Task"})}),"\n",(0,o.jsxs)(n.p,{children:["To easily extract prediction tasks from MEDS Data, we will use the\n",(0,o.jsx)(n.a,{href:"https://github.com/justin13601/aces/",children:"ACES"})," package. This package allows you to define simple\nconfiguration files that specify the inclusion/exclusion criteria for tasks you want to extract and have them\nbe automatically extractable from MEDS data via a command line interface. See the\n",(0,o.jsx)(n.a,{href:"https://eventstreamaces.readthedocs.io/en/latest/",children:"ACES documentation"})," for more information."]}),"\n",(0,o.jsxs)(n.p,{children:["In this tutorial, we'll explore both the motivation behind the ACES language and how it works technically in\nthe jupyter notebook below. You can also check it out online on ",(0,o.jsx)(n.a,{href:"https://colab.research.google.com/github/Medical-Event-Data-Standard/medical-event-data-standard.github.io/blob/main/tutorial_notebooks/KDD_tutorial/Extract_a_Prediction_Task.ipynb",children:"Google\nColab"}),"\nor on our ",(0,o.jsx)(n.a,{href:"https://github.com/Medical-Event-Data-Standard/medical-event-data-standard.github.io/blob/main/tutorial_notebooks/KDD_tutorial/Extract_a_Prediction_Task.ipynb",children:"GitHub Repository"})]}),"\n",(0,o.jsx)(d(),{rawIpynb:l})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}}}]);