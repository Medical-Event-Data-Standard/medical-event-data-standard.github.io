"use strict";(self.webpackChunktemp=self.webpackChunktemp||[]).push([[755],{23516:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"intro_pages/what_is_MEDS","title":"What is MEDS?","description":"MEDS is a data standard for structured, longitudinal medical record data, built for reproducible, efficient","source":"@site/docs/intro_pages/2_what_is_MEDS.mdx","sourceDirName":"intro_pages","slug":"/intro_pages/what_is_MEDS","permalink":"/docs/intro_pages/what_is_MEDS","draft":false,"unlisted":false,"editUrl":"https://github.com/Medical-Event-Data-Standard/medical-event-data-standard.github.io/tree/main/docs/docs/intro_pages/2_what_is_MEDS.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"mainSidebar","previous":{"title":"Welcome to MEDS","permalink":"/docs/intro_pages/intro"},"next":{"title":"MEDS KDD 2025 Tutorial","permalink":"/docs/tutorials/kdd2025/"}}');var i=a(74848),n=a(28453);const r={sidebar_position:1},d="What is MEDS?",o={},l=[{value:"Requirements for a MEDS Compliant Dataset",id:"requirements-for-a-meds-compliant-dataset",level:2},{value:"MEDS Directory Structure Specification",id:"meds-directory-structure-specification",level:3},{value:"MEDS Data File Specification",id:"meds-data-file-specification",level:3},{value:"MEDS Metadata File Specification",id:"meds-metadata-file-specification",level:3},{value:"<code>codes.parquet</code>",id:"codesparquet",level:4},{value:"<code>dataset.json</code>",id:"datasetjson",level:4},{value:"<code>subject_splits.parquet</code>",id:"subject_splitsparquet",level:4},{value:"Labeled cohorts over a MEDS dataset",id:"labeled-cohorts-over-a-meds-dataset",level:3},{value:"MEDS Dataset Conventions and Best Practices",id:"meds-dataset-conventions-and-best-practices",level:2},{value:"Recommended constants",id:"recommended-constants",level:3},{value:"Future Roadmap and How to Contribute",id:"future-roadmap-and-how-to-contribute",level:2},{value:"Multi-modal data support",id:"multi-modal-data-support",level:3},{value:"Visualization and data exploration tools",id:"visualization-and-data-exploration-tools",level:3},{value:"Standardized support for complex data pre-processing steps",id:"standardized-support-for-complex-data-pre-processing-steps",level:3},{value:"More extensive data validation and error checking",id:"more-extensive-data-validation-and-error-checking",level:3},{value:"Key Terminology and Concepts",id:"key-terminology-and-concepts",level:2}];function c(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,n.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"what-is-meds",children:"What is MEDS?"})}),"\n",(0,i.jsx)(t.p,{children:"MEDS is a data standard for structured, longitudinal medical record data, built for reproducible, efficient\nMachine Learning (ML)/Artificial Intelligence (AI) research in healthcare. It is designed to be simple,\nflexible, and interoperable with existing tools and standards. MEDS is entirely open-source and\ncommunity-driven, and we welcome contributions from all interested parties!"}),"\n",(0,i.jsx)(t.p,{children:"The critical aspects of the MEDS standard can be seen visually, in the image below:"}),"\n",(0,i.jsx)("center",{children:(0,i.jsx)("img",{src:"/img/data_figure.svg",alt:"The MEDS Schema, Visually",width:"80%"})}),"\n",(0,i.jsx)(t.p,{children:"Here, we show both the required organization of MEDS files on disk, as well as the schema of the core data and\nmetadata elements for MEDS datasets. In the rest of this document, we will explore these key concepts in more\ndetail, in particular covering: 2. Requirements for a MEDS compliant dataset 3. MEDS dataset conventions and best practices 4. Future roadmap and how to contribute 5. And, finally, a glossary of some key terminology and concepts"}),"\n",(0,i.jsx)(t.h2,{id:"requirements-for-a-meds-compliant-dataset",children:"Requirements for a MEDS Compliant Dataset"}),"\n",(0,i.jsx)(t.p,{children:"For a dataset to be compliant with the MEDS standard at a given version (versioning is given by the PyPi\npackage version), it must satisfy several requirements:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"It must be stored in a directory structure that is compliant with the MEDS directory structure\nspecification."}),"\n",(0,i.jsx)(t.li,{children:"It must store the required data files in the required PyArrow Parquet format."}),"\n",(0,i.jsx)(t.li,{children:"It must store the required metadata files in the required JSON and PyArrow Parquet formats."}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"meds-directory-structure-specification",children:"MEDS Directory Structure Specification"}),"\n",(0,i.jsxs)(t.p,{children:["The MEDS directory structure is a simple, hierarchical directory structure that is designed to be easy to use\nand understand. The root directory of a MEDS dataset is referred to as the ",(0,i.jsx)(t.em,{children:"MEDS root directory"}),", and all\npaths within the MEDS dataset are relative to this root directory. There are two required subdirectories of\nthe MEDS root directory: ",(0,i.jsx)(t.code,{children:"data/"})," and ",(0,i.jsx)(t.code,{children:"metadata/"}),". The ",(0,i.jsx)(t.code,{children:"data/"})," directory contains the MEDS data files, and the\n",(0,i.jsx)(t.code,{children:"metadata/"})," directory contains the MEDS metadata files:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-plaintext",children:"\u251c\u2500data/\n\u2502 \u2514\u2500**.parquet\n\u2502\n\u2514\u2500metadata/\n  \u251c\u2500codes.parquet\n  \u251c\u2500dataset.json\n  \u2514\u2500subject_splits.parquet\n"})}),"\n",(0,i.jsx)(t.h3,{id:"meds-data-file-specification",children:"MEDS Data File Specification"}),"\n",(0,i.jsxs)(t.p,{children:["As is shown above, data files are stored in any nested (potentially multi-level) parquet files within the\n",(0,i.jsx)(t.code,{children:"data/"})," folder (and all such parquet files must be data files). Each of these individual data files is a\nsingle ",(0,i.jsx)(t.em,{children:"shard"})," of the dataset, and must follow the following specifications:"]}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["It must be compliant with the\n",(0,i.jsx)(t.a,{href:"https://github.com/Medical-Event-Data-Standard/meds/blob/main/src/meds/schema.py#L45",children:"MEDS data schema"})]}),"\n",(0,i.jsxs)(t.li,{children:["All data for a given ",(0,i.jsx)(t.em,{children:"subject"})," must be stored in the same shard."]}),"\n",(0,i.jsxs)(t.li,{children:["Shards must be sorted by ",(0,i.jsx)(t.code,{children:"subject_id"})," and ",(0,i.jsx)(t.code,{children:"time"})," within the shard---ordering within these groups is\nunspecified."]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.a,{href:"https://github.com/Medical-Event-Data-Standard/meds/blob/main/src/meds/schema.py#L45",children:"MEDS data schema"}),"\nis an ",(0,i.jsx)(t.a,{href:"https://arrow.apache.org/",children:"Apache Arrow"})," schema that specifies the required columns and data types for\nMEDS data files. It currently includes the following columns:"]}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"subject_id"}),": A unique identifier for each subject in the dataset, of type ",(0,i.jsx)(t.code,{children:"int64"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"time"}),": The time at which the measurement corresponding to this row occurred, of type ",(0,i.jsx)(t.code,{children:"timestamp[us]"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"code"}),": A code representing the measurement that occurred (e.g., a diagnosis or medication code), of type\n",(0,i.jsx)(t.code,{children:"string"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"numeric_value"}),": If the measurement has a numeric value associated with it (e.g., a lab result), this\ncolumn contains that value, of type ",(0,i.jsx)(t.code,{children:"float32"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["All columns except ",(0,i.jsx)(t.code,{children:"subject_id"})," and ",(0,i.jsx)(t.code,{children:"code"})," may contain ",(0,i.jsx)(t.code,{children:"null"}),"s. If the ",(0,i.jsx)(t.code,{children:"time"})," column is ",(0,i.jsx)(t.code,{children:"null"})," it indicates a\n",(0,i.jsx)(t.em,{children:"static"})," measurement, and such rows should be sorted to the beginning of their associated subject's data. If\nthe ",(0,i.jsx)(t.code,{children:"numeric_value"})," column is ",(0,i.jsx)(t.code,{children:"null"}),", it indicates that the measurement does not have an associatecd numeric\nvalue."]}),"\n",(0,i.jsx)(t.admonition,{type:"tip",children:(0,i.jsx)(t.p,{children:"Note that MEDS data files can contain additional columns beyond the required columns to store additional\nidentifiers, other data modalities, etc. to support the specific needs of a given dataset."})}),"\n",(0,i.jsx)(t.admonition,{type:"tip",children:(0,i.jsxs)(t.p,{children:["The MEDS data pyarrow schema can be imported from the ",(0,i.jsx)(t.a,{href:"https://pypi.org/project/meds/",children:"MEDS PyPi package"})," to\nvalidate MEDS data files."]})}),"\n",(0,i.jsxs)(t.p,{children:["The path from the MEDS data folder (",(0,i.jsx)(t.code,{children:"$MEDS_ROOT/data/"}),') to the shard file, "',(0,i.jsx)(t.code,{children:"/"}),'" separated and without the\n',(0,i.jsx)(t.code,{children:".parquet"})," extension, is the ",(0,i.jsx)(t.em,{children:"shard name"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"meds-metadata-file-specification",children:"MEDS Metadata File Specification"}),"\n",(0,i.jsxs)(t.p,{children:["As shown above, there are three key MEDS metadata files: ",(0,i.jsx)(t.code,{children:"codes.parquet"}),", ",(0,i.jsx)(t.code,{children:"dataset.json"}),", and\n",(0,i.jsx)(t.code,{children:"subject_splits.parquet"}),"."]}),"\n",(0,i.jsx)(t.h4,{id:"codesparquet",children:(0,i.jsx)(t.code,{children:"codes.parquet"})}),"\n",(0,i.jsxs)(t.p,{children:["This file contains metadata about the ",(0,i.jsx)(t.code,{children:"code"})," vocabulary featured in the data files. It must contain the\nfollowing three files:"]}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"code"}),": The code value, of type ",(0,i.jsx)(t.code,{children:"string"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"description"}),": An optional free-text, human readable description of the code, of type ",(0,i.jsx)(t.code,{children:"string"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"parent_codes"}),": An optional list of links to parent codes in this dataset or external ontology nodes\nassociated with this code, of type ",(0,i.jsx)(t.code,{children:"list[string]"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["Much like the data schema, the ",(0,i.jsx)(t.code,{children:"codes.parquet"})," file can contain additional columns beyond the required\ncolumns."]}),"\n",(0,i.jsx)(t.admonition,{type:"warning",children:(0,i.jsx)(t.p,{children:"It is not guaranteed that all codes will have descriptions or parent codes, or even appear as a row in the\nmetadata file at all! Further, the parent codes listed in this file are not guaranteed to be exhaustive or\ncomplete."})}),"\n",(0,i.jsxs)(t.p,{children:["One common use of the ",(0,i.jsx)(t.code,{children:"parent_codes"})," column is to link to external ontologies in the OMOP vocabulary space.\nSuch linkages should be formatted as ",(0,i.jsx)(t.code,{children:'"$VOCABULARY_NAME/$CONCEPT_NAME"'}),"; for example, a ",(0,i.jsx)(t.code,{children:"parent_code"})," of\n",(0,i.jsx)(t.code,{children:'"ICD9CM/487.0"'})," would be a reference to ICD9 code 487.0."]}),"\n",(0,i.jsxs)(t.p,{children:["The formal schema for the ",(0,i.jsx)(t.code,{children:"codes.parquet"})," file can be imported from the ",(0,i.jsx)(t.code,{children:"meds"})," package and is documented\n",(0,i.jsx)(t.a,{href:"https://github.com/Medical-Event-Data-Standard/meds/blob/main/src/meds/schema.py#L165",children:"here"})]}),"\n",(0,i.jsx)(t.admonition,{type:"tip",children:(0,i.jsxs)(t.p,{children:["Some libraries and models will rely on ",(0,i.jsx)(t.code,{children:"codes.parquet"})," file for various tasks, such as for producing embedding\nvectors of codes based on free-text descriptions, performing ontology expansion, or storing code value\nstatistics for normalization, etc."]})}),"\n",(0,i.jsx)(t.h4,{id:"datasetjson",children:(0,i.jsx)(t.code,{children:"dataset.json"})}),"\n",(0,i.jsx)(t.p,{children:"This file contains metadata about the dataset itself, including the following:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"dataset_name"}),": The name of the dataset, of type ",(0,i.jsx)(t.code,{children:"string"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"dataset_version"}),": The version of the dataset, of type ",(0,i.jsx)(t.code,{children:"string"}),". Ensuring the version numbers used are\nmeaningful and unique is important for reproducibility, but is ultimately not enforced by the MEDS schema\nand is left to the dataset creator."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"etl_name"}),": The name of the ETL process used to generate the dataset, of type ",(0,i.jsx)(t.code,{children:"string"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"etl_version"}),": The version of the ETL process used to generate the dataset, of type ",(0,i.jsx)(t.code,{children:"string"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"meds_version"}),": The version of the MEDS standard used to generate the dataset, of type ",(0,i.jsx)(t.code,{children:"string"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"created_at"}),": The timestamp at which the dataset was created, of type ",(0,i.jsx)(t.code,{children:"string"})," in ISO 8601 format (note\nthat this is not an official timestamp type, but rather a string representation of a timestamp as this is\na JSON file)."]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["The formal JSON schema for the ",(0,i.jsx)(t.code,{children:"dataset.json"})," file can be imported from the ",(0,i.jsx)(t.code,{children:"meds"})," package and is documented\n",(0,i.jsx)(t.a,{href:"https://github.com/Medical-Event-Data-Standard/meds/blob/main/src/meds/schema.py#L124",children:"here"})]}),"\n",(0,i.jsx)(t.h4,{id:"subject_splitsparquet",children:(0,i.jsx)(t.code,{children:"subject_splits.parquet"})}),"\n",(0,i.jsxs)(t.p,{children:["This file maps subject IDs to pre-defined splits of the dataset, such as training, hyperparameter tuning, and\nheld-out sets. In the MEDS splits file, each row contains a ",(0,i.jsx)(t.code,{children:"subject_id"})," (",(0,i.jsx)(t.code,{children:"int64"}),") and a ",(0,i.jsx)(t.code,{children:"split"})," (",(0,i.jsx)(t.code,{children:"string"}),")\ncolumn, where ",(0,i.jsx)(t.code,{children:"split"})," is the name of the split in which that subject lives. For the three canonical AI/ML\nsplits, MEDS uses the following split names:"]}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"train"}),": The training split. This data can be used for any purpose during model building, and in\nsupervised training labels over this split will be visible to the model."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"tuning"}),': The hyperparameter tuning split. This split is sometimes called the "dev" or "val" split in\nother contexts. This data can be used for tuning hyperparameters or for training of the final model, but\nshould not be used for final evaluation of model performance. Users may choose to merge this with the\ntraining split then re-shuffle themselves if they need more splits or a different split ratio. Not all\ndatasets will specify this split, as it is optional.']}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"held_out"}),': The final evaluation held-out split. This data should not be used for training or tuning, and\nshould only be used for final evaluation of model performance. This split is sometimes called the "test"\nsplit in other contexts. No data about these patients should be assumed to be available during data\npre-processing, training, or tuning.']}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["In addition to these splits, any additional custom splits as desired by the user can be used. No additional\ncolumns are allowed in this file. The parquet schema for this file can be imported from the ",(0,i.jsx)(t.code,{children:"meds"})," package and\nis documented\n",(0,i.jsx)(t.a,{href:"https://github.com/Medical-Event-Data-Standard/meds/blob/main/src/meds/schema.py#L110",children:"here"})]}),"\n",(0,i.jsx)(t.h3,{id:"labeled-cohorts-over-a-meds-dataset",children:"Labeled cohorts over a MEDS dataset"}),"\n",(0,i.jsxs)(t.p,{children:["In addition to the data and metadata files, MEDS also provides a schema for defining labeled cohorts over a\nMEDS dataset. Label files do not have a required on-disk organization, though it is recommended to store them\nin a ",(0,i.jsx)(t.code,{children:"labels/$COHORT_NAME/**.parquet"}),' format within the MEDS-root directory. Labeled cohorts within MEDS\nconsist of a set of sharded parquet files (the sharding need not be identical to the data shards). Each of\nthese files is a table such that each row in the table corresponds to one "sample" in the cohort (a ',(0,i.jsx)(t.em,{children:"sample"}),"\nis a single unit of prediction, and there may be multiple samples corresponding to a single subject in the\nMEDS dataset). Each row in the table must contain the following columns:"]}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"subject_id"}),": The subject ID of the subject for this sample, of type ",(0,i.jsx)(t.code,{children:"int64"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"prediction_time"}),": The upper bound (inclusive) of the time window of data which can be observed when this\nprediction is made, of type ",(0,i.jsx)(t.code,{children:"timestamp[us]"}),". E.g., your model may use data for all events that occur at\nor before this time to make a prediction for this sample."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"boolean_value"}),": If this task is a binary classification task, this column contains the binary label for\nthe sample, of type ",(0,i.jsx)(t.code,{children:"bool"}),", otherwise this column is ",(0,i.jsx)(t.code,{children:"null"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"integer_value"}),": If this task is an ordinal regression or a classification task with integral labels,\nthis column contains the numeric label for the sample, of type ",(0,i.jsx)(t.code,{children:"int64"}),", otherwise this column is\n",(0,i.jsx)(t.code,{children:"null"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"float_value"}),": If this task is a regression task, this column contains the numeric label for the sample,\nof type ",(0,i.jsx)(t.code,{children:"float64"}),", otherwise this column is ",(0,i.jsx)(t.code,{children:"null"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"categorical_value"}),": If this task is a classification task with categorical labels, this column contains\nthe categorical label for the sample, of type ",(0,i.jsx)(t.code,{children:"string"}),", otherwise this column is ",(0,i.jsx)(t.code,{children:"null"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["The formal schema for the labeled cohort files can be imported from the ",(0,i.jsx)(t.code,{children:"meds"})," package and is documented\n",(0,i.jsx)(t.a,{href:"https://github.com/Medical-Event-Data-Standard/meds/blob/main/src/meds/schema.py#L68",children:"here"})]}),"\n",(0,i.jsx)(t.h2,{id:"meds-dataset-conventions-and-best-practices",children:"MEDS Dataset Conventions and Best Practices"}),"\n",(0,i.jsx)(t.h3,{id:"recommended-constants",children:"Recommended constants"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.a,{href:"https://pypi.org/project/meds/",children:(0,i.jsx)(t.code,{children:"meds"})})," Python package defines a number of constants that are useful for\nbuilding maximally compatible datasets. These include:"]}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["Subdirectory and file names for the required files, such as\n",(0,i.jsx)(t.a,{href:"https://github.com/Medical-Event-Data-Standard/meds/blob/main/src/meds/schema.py#L26",children:(0,i.jsx)(t.code,{children:"meds.data_subdirectory"})}),"\nand\n",(0,i.jsx)(t.a,{href:"https://github.com/Medical-Event-Data-Standard/meds/blob/main/src/meds/schema.py#L104",children:(0,i.jsx)(t.code,{children:"meds.subject_splits_filepath"})})]}),"\n",(0,i.jsxs)(t.li,{children:["Constants for column names and dtypes, such as\n",(0,i.jsx)(t.a,{href:"https://github.com/Medical-Event-Data-Standard/meds/blob/main/src/meds/schema.py#L32",children:(0,i.jsx)(t.code,{children:"meds.subject_id_column"})}),"\nand\n",(0,i.jsx)(t.a,{href:"https://github.com/Medical-Event-Data-Standard/meds/blob/main/src/meds/schema.py#L37",children:(0,i.jsx)(t.code,{children:"meds.subject_id_dtype"})})]}),"\n",(0,i.jsxs)(t.li,{children:["Codes for birth and death events:\n",(0,i.jsx)(t.a,{href:"https://github.com/Medical-Event-Data-Standard/meds/blob/main/src/meds/schema.py#L29",children:(0,i.jsx)(t.code,{children:'meds.birth_code = "MEDS_BIRTH"'})}),"\nand\n",(0,i.jsx)(t.a,{href:"https://github.com/Medical-Event-Data-Standard/meds/blob/main/src/meds/schema.py#L30",children:(0,i.jsx)(t.code,{children:'meds.death_code = "MEDS_DEATH"'})})]}),"\n",(0,i.jsxs)(t.li,{children:["The three sentinel split names:\n",(0,i.jsx)(t.a,{href:"https://github.com/Medical-Event-Data-Standard/meds/blob/main/src/meds/schema.py#L106",children:(0,i.jsx)(t.code,{children:'meds.train_split = "train"'})}),"\n",(0,i.jsx)(t.a,{href:"https://github.com/Medical-Event-Data-Standard/meds/blob/main/src/meds/schema.py#L107",children:(0,i.jsx)(t.code,{children:'meds.tuning_split = "tuning"'})}),"\n",(0,i.jsx)(t.a,{href:"https://github.com/Medical-Event-Data-Standard/meds/blob/main/src/meds/schema.py#L108",children:(0,i.jsx)(t.code,{children:'meds.held_out_split = "held_out"'})})]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"future-roadmap-and-how-to-contribute",children:"Future Roadmap and How to Contribute"}),"\n",(0,i.jsx)(t.p,{children:"While MEDS enables a lot of exciting research already, we have a number of exciting plans to make it even\nbetter. Key ongoing efforts include but are not limited to those listed below. If you'd like to contribute to\nMEDS, either through any of these efforts or other approaches, please feel free to reach out on our GitHub. We\nwelcome any and all contributions!"}),"\n",(0,i.jsx)(t.h3,{id:"multi-modal-data-support",children:"Multi-modal data support"}),"\n",(0,i.jsxs)(t.p,{children:["MEDS is built for supporting longitudinal, structured EHR data, but it is clear that health AI covers more\nthan just this kind of data. We are actively working to extend MEDS to support additional data modalities,\nincluding free-text, imaging, waveform, and other data types. There are already several tools that make use of\nsome free-text data through a proposed ",(0,i.jsx)(t.code,{children:"text_value"})," column, but official support is still in the works. Stay\ntuned or get involved on our GitHub to help with these efforts!"]}),"\n",(0,i.jsx)(t.h3,{id:"visualization-and-data-exploration-tools",children:"Visualization and data exploration tools"}),"\n",(0,i.jsx)(t.p,{children:"In order to model data effectively, you first have to understand it, and few things help data understanding\nmore than high-quality visualization and data exploration tools. The ecosystem for such tools in the EHR data\nlandscape is very limited, and we are actively working to build out a set of tools that can help researchers\nbetter understand their data for the MEDS format."}),"\n",(0,i.jsx)(t.h3,{id:"standardized-support-for-complex-data-pre-processing-steps",children:"Standardized support for complex data pre-processing steps"}),"\n",(0,i.jsxs)(t.p,{children:["While MEDS is designed to be simple and flexible, there are a number of complex data pre-processing steps that\nare common in health AI research but not yet supported out of the box through existing tools, such as\nvocabulary conversion, unit standardization, structured-data summarization to free-text, use of large language\nmodels (LLMs), or data QA testing. We are actively working to build support for these tools through both\ndedicated ",(0,i.jsx)(t.a,{href:"https://meds-transforms.readthedocs.io/en/stable/",children:"MEDS-Transforms"})," stages or standalone tools on a\ncase-by-case basis. Feel free to reach out if these efforts would help your research or you'd like to\ncontribute!"]}),"\n",(0,i.jsx)(t.h3,{id:"more-extensive-data-validation-and-error-checking",children:"More extensive data validation and error checking"}),"\n",(0,i.jsx)(t.p,{children:"Health data is known to be highly noisy and suffer from high rates of errors, be it physiologically impossible\nmeasurements, mis-labeled data, or low-information content observations. We are actively working to build out\nstandardized tools that can help automatically clean MEDS datasets to a limited degree to help researchers\nmake their data more meaningful and reliable in a transparent, reproducible way."}),"\n",(0,i.jsx)(t.h2,{id:"key-terminology-and-concepts",children:"Key Terminology and Concepts"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["A ",(0,i.jsx)(t.em,{children:"subject"})," in a MEDS dataset is the primary entity being described by the sequences of care observations\nin the underlying dataset. In most cases, ",(0,i.jsx)(t.em,{children:"subjects"})," will, naturally, be individuals, and the sequences\nof care observations will cover all known observations about those individuals in a source health\ndatasets. However, in some cases, data may be organized so that we cannot describe all the data for an\nindividual reliably in a dataset, but instead can only describe subsequences of an individual's data,\nsuch as in datasets that only link an individual's data observations together if they are within the same\nhospital admission, regardless of how many admissions that individual has in the dataset (such as the\n",(0,i.jsx)(t.a,{href:"https://eicu-crd.mit.edu/",children:"eICU"})," dataset). In these cases, a ",(0,i.jsx)(t.em,{children:"subject"})," in the MEDS dataset may refer to\na hospital admission rather than an individual."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["A ",(0,i.jsx)(t.em,{children:"measurement"})," in a MEDS dataset is a particular observation being made on a ",(0,i.jsx)(t.em,{children:"subject"})," either statically\nor dynamically at a point in time. ",(0,i.jsx)(t.em,{children:"Measurements"})," are the fundamental unit of data in MEDS datasets, and\nthe core data schema is a longitudinal sequence of ",(0,i.jsx)(t.em,{children:"measurements"})," for each ",(0,i.jsx)(t.em,{children:"subject"})," in the dataset.\nMeasurements generally fall into one of three categories, which may require different handling:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.em,{children:"static measurements"})," are those that are recorded in the source dataset absent a specific timestamp\nand are assumed to be observed and applicable across all observations in the patient record. Note\nthis is ",(0,i.jsx)(t.em,{children:"not"})," the same as things that are ",(0,i.jsx)(t.em,{children:"conceptually"})," assumed to be static; e.g., a patient's race\nmay be recorded at each visit in a health record, and thus would be treated as a ",(0,i.jsx)(t.em,{children:"dynamic"}),"\nmeasurement ",(0,i.jsx)(t.em,{children:"in that dataset specifically"}),". Likewise, some datasets may have static measurements that\nwe would ",(0,i.jsx)(t.em,{children:"conceptually"})," expect to plausibly change over time, such as a patient's gender or the\ninstitution of care."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.em,{children:"time-derived measurements"})," are measurements that vary in time, but are directly programmatically\ndeterminable from the timestamp of the observation and the subject's static or historic data. For\nexample, a patient's age at the time of a measurement is a time-derived measurement, as it can be\ncalculated from the patient's date of birth and the timestamp of the observation. Similarly, the time\nof day that a set of labs is taken is a time-derived measurement. Time-derived measurements are often\nnot directly recorded in the raw data, but may be inferred or added during analysis."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.em,{children:"dynamic measurements"})," are those that are recorded in the source dataset with a specific timestamp\nindicating when the observation was made. These measurements are assumed to be observed at a single\nunique point in time and are not necessarily applicable across all observations in the patient\nrecord. As these are recorded observations, they are generally assumed to not be programmatically\ndeterminable in the manner of time-derived measurements."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["An ",(0,i.jsx)(t.em,{children:"event"})," in a MEDS dataset is a set of measurements that are observed at a single unique point in time.\n",(0,i.jsx)(t.em,{children:"Measurements"})," within an ",(0,i.jsx)(t.em,{children:"event"})," are not necessarily independent of each other. Further, while ",(0,i.jsx)(t.em,{children:"event_s\ncan be meaningfully ordered in time, _measurements"})," within an event should not be assumed a priori to\ncome with any meaningful ordering. In some cases, ",(0,i.jsx)(t.em,{children:"event"})," will be used interchangeably with\n",(0,i.jsx)(t.em,{children:"measurement"}),", but when the two terms are used distinctly, ",(0,i.jsx)(t.em,{children:"event"})," will refer to those measurements that\nshare a unique timepoint, and ",(0,i.jsx)(t.em,{children:"measurement"})," will refer to the individual observations within an ",(0,i.jsx)(t.em,{children:"event"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["Within a measurement, a ",(0,i.jsx)(t.em,{children:"code"})," is the categorical descriptor of what is being observed in that\nmeasurement. _Code_s are not required to follow any particular coding vocabulary, and should be assumed\nto be institution specific unless otherwise specified."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["A ",(0,i.jsx)(t.em,{children:"shard"})," in a MEDS dataset is a single file containing a subset of the data for the dataset. Shards are\nused to split the data into manageable chunks for processing and storage. All data for a given ",(0,i.jsx)(t.em,{children:"subject"}),"\nmust be stored in the same shard."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["A ",(0,i.jsx)(t.em,{children:"sample"})," in a labeled cohort is one unit of prediction. This may be at the subject level or, more\ncommonly at the subject-event level, where a prediction is made for a subset of key events in a subject's\nrecord. For example, we may wish to make a prediction of in-hospital mortality at the 24 hour mark after\nadmission ",(0,i.jsx)(t.em,{children:"for each admission of a subject"})," in a dataset. In this case, each admission that meets the\ninclusion/exclusion criteria would constitute a ",(0,i.jsx)(t.em,{children:"sample"})," in the cohort."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);